<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>空博客</title>
  
  <subtitle>总不能浪费个副标题吧</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-27T11:27:46.982Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>JQK/许阳航</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>numpy中向量的表示方法</title>
    <link href="http://yoursite.com/2019/04/27/numpy%E4%B8%AD%E5%90%91%E9%87%8F%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/04/27/numpy中向量的表示方法/</id>
    <published>2019-04-27T11:17:01.000Z</published>
    <updated>2019-04-27T11:27:46.982Z</updated>
    
    <content type="html"><![CDATA[<h3 id="行向量"><a href="#行向量" class="headerlink" title="行向量"></a>行向量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]])</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]]</span><br></pre></td></tr></table></figure><p><code>.shape</code>为（1,3）。是一个一行三列的<strong>行向量</strong>。</p><a id="more"></a><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3]</span><br></pre></td></tr></table></figure><p><code>.shape</code>为（3，）。是一个ndarray<strong>数组</strong>，严格来说并不是向量，注意和行向量区分。</p><h3 id="列向量"><a href="#列向量" class="headerlink" title="列向量"></a>列向量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.array([[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]])</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1</span>],</span><br><span class="line"> [<span class="number">2</span>],</span><br><span class="line"> [<span class="number">3</span>]]</span><br></pre></td></tr></table></figure><p><code>.shape</code>为（3,1）。是一个三行一列的<strong>列向量</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;行向量&quot;&gt;&lt;a href=&quot;#行向量&quot; class=&quot;headerlink&quot; title=&quot;行向量&quot;&gt;&lt;/a&gt;行向量&lt;/h3&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;np.array([[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;.shape&lt;/code&gt;为（1,3）。是一个一行三列的&lt;strong&gt;行向量&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Numpy" scheme="http://yoursite.com/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>机器学习笔记|第七周</title>
    <link href="http://yoursite.com/2019/04/26/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%83%E5%91%A8/"/>
    <id>http://yoursite.com/2019/04/26/机器学习笔记-第七周/</id>
    <published>2019-04-26T03:16:22.000Z</published>
    <updated>2019-04-26T03:19:51.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h2><h3 id="优化目标"><a href="#优化目标" class="headerlink" title="优化目标"></a>优化目标</h3><p>在监督学习中，重要的不是你选择的算法，而是应用这些算法时，选择的特征、正则化参数等等诸如此类。其中有一种非常强大的分类工具，称为支持向量机。（<strong>Support Vector Machine，SVM</strong>）</p><p>下面展示如何通过修改逻辑回归，来得到SVM。</p><p>首先回顾一下逻辑回归假设函数，注意<code>y=1</code>和<code>y=0</code>的情况。</p><p><img src="https://s2.ax1x.com/2019/04/24/EVoj9P.md.png" alt="EVoj9P.md.png"></p><a id="more"></a><p>进一步写出代价函数</p><p><img src="https://s2.ax1x.com/2019/04/24/EVTC7j.md.png" alt="EVTC7j.md.png"></p><p>当<code>y=1</code>时，此时代价函数剩左边一项$-y \log \frac{1}{1+e^{-\theta^{T} x} }$，图像为</p><p><img src="https://s2.ax1x.com/2019/04/24/EVTFNn.png" alt="EVTFNn.png"></p><p>其中的曲线为逻辑回归代价函数，两段直线为SVM的代价函数，记为$cost_{1}(z)$</p><p>同理，当<code>y=0</code>时，代价函数剩右边一项$(1-y) \log \left(1-\frac{1}{1+e^{-\theta^{T} x} }\right)$，图像为</p><p><img src="https://s2.ax1x.com/2019/04/24/EVTfEj.png" alt="EVTfEj.png"></p><p>其中的SVM代价函数，记为$cost_{0}(z)$。</p><p>完整的逻辑回归代价函数写成：$\min _{\theta} \frac{1}{m}\left[\sum_{i=1}^{m} y^{(i)}\left(-\log h_{\theta}\left(x^{(i)}\right)\right)+\left(1-y^{(i)}\right)\left(\left(-\log \left(1-h_{\theta}\left(x^{(i)}\right)\right)\right)\right]+\frac{\lambda}{2 m} \sum_{j=1}^{n} \theta_{j}^{2}\right.$</p><p>可以看出由代价项和正则化项两部分组成，基本形式为$A+\lambda B$，$\lambda$可以看做是控制两部分的<em>权重</em>。</p><p>要写出SVM的代价函数，首先我们把逻辑回归代价函数的$\frac{1}{m}$去掉，不影响$\theta$值。然后我们把正则化项的系数$\lambda$去掉，在代价项前面添上一个系数C，效果等同于$\frac{1}{\lambda}$。</p><p>因此，最终SVM的代价函数为：$\min _{\theta} C \sum_{i=1}^{m}\left[y^{(i)} \cos t_{1}\left(\theta^{T} x^{(i)}\right)+\left(1-y^{(i)}\right) \operatorname{cost}_{0}\left(\theta^{T} x^{(i)}\right)\right]+\frac{1}{2} \sum_{i=1}^{n} \theta_{j}^{2}$</p><p>假设函数为：</p><p><img src="https://s2.ax1x.com/2019/04/24/EVHUkd.png" alt="EVHUkd.png"></p><p>注意，和逻辑回归假设函数计算出的是概率不同，SVM假设函数直接计算结果(1/0)。</p><h3 id="直观理解大间距"><a href="#直观理解大间距" class="headerlink" title="直观理解大间距"></a>直观理解大间距</h3><p>SVM又被称为大间距分类器，以下直观讲解为什么。</p><p><img src="https://s2.ax1x.com/2019/04/25/EZ0zzq.md.png" alt="EZ0zzq.md.png"></p><p>从图中可以看出：</p><p><code>y=1</code>时，需要$\theta^{T}x\ge1$，区别于逻辑回归中$\ge0$，此时$cost_{1}(z)=0$，即SVM在正确分类的基础上还构建了一个安全距离。</p><p><code>y=0</code>时，需要$\theta^{T}x\le-1$，区别于逻辑回归中$\le0$，此时$cost_{0}(z)=0$，即SVM在正确分类的基础上还构建了一个安全距离。</p><p>接下来，如果我们把代价函数中的常熟C设置成一个非常大的值，例如C=100000，此时为了使代价最小，就必须让最优化函数<img src="https://s2.ax1x.com/2019/04/25/EZBHpR.md.png" alt="EZBHpR.md.png"></p><p>中蓝色框部分等于0，又根据<code>y=1</code>或<code>y=0</code>时$\theta^{T}x$的取值，可以把优化问题和约束条件改为：</p><p><img src="https://s2.ax1x.com/2019/04/25/EZBv7D.png" alt="EZBv7D.png"></p><p>当你把它最小化时，可以得到决策边界。</p><p><img src="https://s2.ax1x.com/2019/04/25/EZDphd.png" alt="EZDphd.png"></p><p>其中黑线为SVM的决策边界，比起粉红线和绿线，显然黑线具有更好的鲁棒性（robustness，又叫<strong>健壮性</strong>，在计算机中代表运行过程中处理错误，或是算法、输入异常时仍然正确运行的能力），距离正负样本的最小距离最大。也因此我们把SVM称为最大间距分类。</p><p>如果把C设置的非常大时，可能会出现下面的情况</p><p><img src="https://s2.ax1x.com/2019/04/25/EZDK9s.png" alt="EZDK9s.png"></p><p>由于左下角出现了一个异常点，决策边界会从黑线变为粉红线。相当于$\lambda$过小导致过拟合。如果把C值设置的小一点，则会忽略异常点的影响。因此对C的讨论，其实也是过拟合和欠拟合的问题。</p><p><img src="https://s2.ax1x.com/2019/04/25/EZDcUe.png" alt="EZDcUe.png"></p><h3 id="大间隔分类器数学原理"><a href="#大间隔分类器数学原理" class="headerlink" title="大间隔分类器数学原理"></a>大间隔分类器数学原理</h3><p>本节解释了为什么SVM能够大间隔分类</p><ul><li>向量内积</li></ul><p><img src="https://s2.ax1x.com/2019/04/25/EZfmL9.md.png" alt="EZfmL9.md.png"></p><p>简单来说，就是内积等于$u^{T}v$，也等于$p\lVert u \rVert$，其中p为向量v对向量u的投影，$\lVert u \rVert$为范数（norm，意思是具有“长度”概念的函数，这里可以简单理解为向量的长度）。内积具有正负，当向量夹角大于90度，内积为负；小于90度，内积为正。</p><p>那么回到优化问题上</p><p><img src="https://s2.ax1x.com/2019/04/25/EZ5mLQ.md.png" alt="EZ5mLQ.md.png"></p><p>我们假设n=2，$\theta_{0}=0$，然后通过之前提到的内容，可以改写优化问题：$\min _{\theta} \frac{1}{2} \sum_{j=1}^{n} \theta_{j}^{2}=\frac{1}{2}|\theta|^{2}$</p><p>也可以改写约束条件，即把$\theta^{T} x^{(i)}$看成是向量相乘，最终能改写为下面的式子：</p><p><img src="https://s2.ax1x.com/2019/04/25/EZ5Tl8.png" alt="EZ5Tl8.png"></p><p>那么为什么SVM不会选择下图中的决策边界呢？</p><p><img src="https://s2.ax1x.com/2019/04/25/EZIJht.png" alt="EZIJht.png"></p><p>其原因是，由下图可以看出，位于一、四象限的样本$x^{(1)}$，因为和决策边界接近，当它投影到$\theta$上时得到的$p^{(1)}$非常小，因此如果要满足$p^{(i)} \cdot|\theta| \geq 1$，那么$|\theta|$就必须非常大，这跟我们的优化问题$\min _{\theta} \frac{1}{2} \sum_{j=1}^{n} \theta_{j}^{2}=\frac{1}{2}|\theta|^{2}$矛盾。</p><p>位于二、三象限样本同理。</p><p><img src="https://s2.ax1x.com/2019/04/25/EZIB7j.png" alt="EZIB7j.png"></p><p>正确的样本边界如下图</p><p><img src="https://s2.ax1x.com/2019/04/25/EeKFDx.png" alt="EeKFDx.png"></p><p>额外说明一下，这里的$\theta_{0}=0$意味着决策边界一定会经过原点，如果令其不等于0，结论也是同样成立的。</p><h3 id="核函数1"><a href="#核函数1" class="headerlink" title="核函数1"></a>核函数1</h3><p>本质上说，核函数跟SVM没有必然联系，但是在用于求分线性分类器时具有很好的效果。</p><p>考虑下图中的数据集：</p><p><img src="https://s2.ax1x.com/2019/04/25/EeYNJP.md.png" alt="EeYNJP.md.png"></p><p>这种非线性的情况，显然用原始输入的两个特征是无法表示的，因此我们需要增加多项式特征。</p><p><img src="https://s2.ax1x.com/2019/04/25/EecHzQ.png" alt="EecHzQ.png"></p><p>这里我们可以将特征重新编号为$f_{i}$：</p><p><img src="https://s2.ax1x.com/2019/04/25/EecLss.md.png" alt="EecLss.md.png"></p><p>但问题在于，如何去选取新的特征呢？之前在逻辑回归时，我们是列举出了多个不同组合方式，通过交叉验证集进行验证，挑选出最合适的。而在SVM中，我们可以通过核函数对原始输入特征进行映射进而得到新的特征。</p><p>举例说明：</p><p>假设此时原始输入x有两个特征$x_{1}$和$x_{2}$（不考虑$x_{0}$），需要得到新的特征$f_{1}$、$f_{2}$、$f_{3}$。</p><p>首先我们选取了3个点$l_{1}$、$l_{2}$、$l_{3}$，称为标记（<strong>landmark</strong>）。</p><p><img src="https://s2.ax1x.com/2019/04/25/Eegrmn.md.png" alt="Eegrmn.md.png"></p><p>从图中可以看出，$f_{i}$为x和$l^{(i)}$相似度，而这个求相似度的函数就被称为核函数（<strong>kernel</strong>），这里用到的是高斯核函数（<strong>Gaussion Kernels</strong>），${ {f}_{1} }=similarity(x,{ {l}^{ (1) } } )=e(-\frac{ { {\left| x-{ {l}^{(1)} } \right|}^{2} } }{2{ {\sigma }^{2} } } )$。</p><p>那么右边的式子究竟是什么含义？</p><p><img src="https://s2.ax1x.com/2019/04/25/Ee2KA0.md.png" alt="Ee2KA0.md.png"></p><p>图中可以很明显的看出，$f_{i}$的取值在0~1之间。</p><p>绘制出核函数的图像如下</p><p><img src="https://s2.ax1x.com/2019/04/25/Ee2f4f.md.png" alt="Ee2f4f.md.png"></p><p>图中水平面坐标代表$x_{1}$和$x_{2}$，垂直的坐标代表$f$，可以看出，只有当x和$l$重合时，$f$才具有最大值。</p><p>同时也可以看出$\sigma$对$f$改变速率的影响。$\sigma$较小时，中间凸起的部分较窄，当x远离$l$时，$f$下降的较快；当$\sigma$较大时则刚好相反。</p><p>得到新的特征值$f$之后，就可以写出假设函数$h(\theta)=\theta_{0}+\theta_{1} f_{1}+\theta_{2} f_{2}+\theta_{3} f_{3}$，进而在图像上画出决策边界如下：</p><p><img src="https://s2.ax1x.com/2019/04/25/EeWpJf.png" alt="EeWpJf.png"></p><p>可以看出，当样本位于粉红色点的位置时，x靠近$l^{(1)}$，y=1；位于绿色点时，靠近$l^{(2)}$，y=1；位于蓝色点时，靠近$l^{(3)}$，y=0。</p><h3 id="核函数2"><a href="#核函数2" class="headerlink" title="核函数2"></a>核函数2</h3><p>在上一节中，我们提到一个重要问题，那就是如何选取标记？</p><p>通常根据训练集的样本数量来选择对应地标，即如果训练集中有m个样本，就选取m个标记。并且令：$l^{(1)}=x^{(1)}, l^{(2)}=x^{(2)}, \ldots, l^{(m)}=x^{(m)}$，这样做的好处在于我们得到的新标记是基于原有特征与其他样本特征的距离。</p><p><img src="https://s2.ax1x.com/2019/04/26/EmE7Q0.md.png" alt="EmE7Q0.md.png"></p><p>由上图我们可以得出结论，对于一个样本$x^{(i)}$，我们可以将它的特征映射为$f^{(i)}$，从维度上看，我们也将原始输入特征从n+1维，映射为m+1维（+1为偏置项，m为标记个数也是样本个数）</p><p><img src="https://s2.ax1x.com/2019/04/26/EmExY9.png" alt="EmExY9.png"></p><p>下面将核函数运用到SVM中，首先我们将原始输入特征映射为新特征$f$，然后根据代价函数求出最优化的$\theta$</p><p>$min C\sum\limits_{i=1}^{m}{ [ { {y}^{ (i)} }cos { {t}_{1} } }( { {\theta }^{T} }{ {f}^{(i)} })+(1-{ {y}^{(i)} })cos { {t}_{0} }( { {\theta }^{T} }{ {f}^{(i)} })]+\frac{1}{2}\sum\limits_{j=1}^{m}{\theta _{j}^{2} }$</p><p>注意这里的最后的正则化项，$j$是从1-m而不是1-n，因为我们新特征$f \in \mathbb{R}^{m+1}$。而在实际运用中，我们还得对这一项的计算做一些修改，通常我们对正则化项的计算是用矩阵相乘$\sum_{j=1}^{n=m} \theta_{j}^{2}=\theta^{T} \theta$，但在SVM中，我们用$θ^TMθ$代替$θ^Tθ$，其中M根据我们选择的核函数来确定，这样可以简化运算。</p><p>最后再代入新的假设函数中。</p><p>使用SVM时还需要选择几个参数：</p><p><img src="https://s2.ax1x.com/2019/04/26/Emn4xA.md.png" alt="Emn4xA.md.png"></p><h3 id="使用SVM"><a href="#使用SVM" class="headerlink" title="使用SVM"></a>使用SVM</h3><p>使用成熟的软件包来计算参数</p><p><img src="https://s2.ax1x.com/2019/04/26/EmMZHx.md.png" alt="EmMZHx.md.png"></p><p>不过还是有些问题需要你自己解决</p><p><img src="https://s2.ax1x.com/2019/04/26/EmMQ8e.png" alt="EmMQ8e.png"></p><p>关于内核函数的选择</p><p>1.可以使用线性内核函数，即不用内核函数，这种情况适用于n较大，m较小。因为如果样本个数少，特征多，去拟合复杂的非线性函数，容易导致过拟合。</p><p><img src="https://s2.ax1x.com/2019/04/26/EmMOPO.md.png" alt="EmMOPO.md.png"></p><p>2.也可以使用核函数（高斯核函数），适用于n较小，m较大。</p><p><img src="https://s2.ax1x.com/2019/04/26/Em1gat.md.png" alt="Em1gat.md.png"></p><p>以一个高斯核函数为例，输入两个特征向量，输出一个实数<img src="https://s2.ax1x.com/2019/04/26/Em3gOJ.png" alt="Em3gOJ.png"></p><p>注意在使用高斯核函数时，一定要对原始输入特征进行缩放：</p><p><img src="https://s2.ax1x.com/2019/04/26/Em35Y6.md.png" alt="Em35Y6.md.png"></p><p>否则会如图中那样，不同范围的特征在生成新特征时会产生不同的影响。</p><p>除此之外还可以选择其他的核函数，但是都必须满足莫塞尔定理，不过除了线性核函数和高斯核函数，其他的一般也不太常用。</p><p><img src="https://s2.ax1x.com/2019/04/26/Em8ehV.md.png" alt="Em8ehV.md.png"></p><h4 id="多类分类问题"><a href="#多类分类问题" class="headerlink" title="多类分类问题"></a>多类分类问题</h4><p><img src="https://s2.ax1x.com/2019/04/26/EmJnL4.png" alt="EmJnL4.png"></p><p>解决多分类问题的方法</p><p>1.可以使用封装好的模块</p><p>2.和之前逻辑回归中多分类问题类似，也可以使用把多分类问题转换成多个二分类问题，最终对新样本进行预测时，只要看它属于哪个正类的假设函数值最大，就属于哪个类别。</p><h4 id="关于逻辑回归、核函数SVM、不含核函数SVM的选择"><a href="#关于逻辑回归、核函数SVM、不含核函数SVM的选择" class="headerlink" title="关于逻辑回归、核函数SVM、不含核函数SVM的选择"></a>关于逻辑回归、核函数SVM、不含核函数SVM的选择</h4><p><img src="https://s2.ax1x.com/2019/04/26/EmJH6U.md.png" alt="EmJH6U.md.png"></p><p>SVM的效果可能不如神经网络，但训练速度快，且是一个凸优化问题（即一定能得到全局最优解）。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;支持向量机&quot;&gt;&lt;a href=&quot;#支持向量机&quot; class=&quot;headerlink&quot; title=&quot;支持向量机&quot;&gt;&lt;/a&gt;支持向量机&lt;/h2&gt;&lt;h3 id=&quot;优化目标&quot;&gt;&lt;a href=&quot;#优化目标&quot; class=&quot;headerlink&quot; title=&quot;优化目标&quot;&gt;&lt;/a&gt;优化目标&lt;/h3&gt;&lt;p&gt;在监督学习中，重要的不是你选择的算法，而是应用这些算法时，选择的特征、正则化参数等等诸如此类。其中有一种非常强大的分类工具，称为支持向量机。（&lt;strong&gt;Support Vector Machine，SVM&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;下面展示如何通过修改逻辑回归，来得到SVM。&lt;/p&gt;
&lt;p&gt;首先回顾一下逻辑回归假设函数，注意&lt;code&gt;y=1&lt;/code&gt;和&lt;code&gt;y=0&lt;/code&gt;的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/04/24/EVoj9P.md.png&quot; alt=&quot;EVoj9P.md.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习笔记|第六周</title>
    <link href="http://yoursite.com/2019/04/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%85%AD%E5%91%A8/"/>
    <id>http://yoursite.com/2019/04/24/机器学习笔记-第六周/</id>
    <published>2019-04-24T07:37:37.000Z</published>
    <updated>2019-04-24T08:05:20.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="运用机器学习建议"><a href="#运用机器学习建议" class="headerlink" title="运用机器学习建议"></a>运用机器学习建议</h2><h3 id="决定下一步做什么？"><a href="#决定下一步做什么？" class="headerlink" title="决定下一步做什么？"></a>决定下一步做什么？</h3><p>当你的模型运用于新的样本时，如果产生巨大的误差该怎么办？</p><p>一般来说，有以下几种处理方式：</p><ul><li>获得更多的训练样本——通常是有效的，但代价较大，下面的方法也可能有效，可考虑先采用下面的几种方法。</li><li>尝试减少特征的数量</li><li>尝试获得更多的特征</li><li>尝试增加多项式特征</li><li>尝试减少正则化程度$\lambda$</li><li>尝试增加正则化程度$\lambda$</li></ul><p>当然我们不可能随机去一个个方法尝试，所以需要一点手段来预测。</p><a id="more"></a><h3 id="评估假设函数"><a href="#评估假设函数" class="headerlink" title="评估假设函数"></a>评估假设函数</h3><p>首先，如果你计算出的误差（代价函数值）非常大，那么选取的假设函数就可能存在问题；即便误差小，也有可能引起过拟合。</p><p>那么如何来判断过拟合问题？</p><p>可以将数据集按比例划分成，训练集（Training set）：测试集（Test set）=70：30。</p><p><img src="https://s2.ax1x.com/2019/04/13/AqXOCq.md.png" alt="AqXOCq.md.png"></p><p>然后将训练集得到的模型运用于测试集，用来计算误差：</p><p>1.对于线性回归模型，我们直接计算<img src="https://s2.ax1x.com/2019/04/13/ALnxt1.png" alt="ALnxt1.png"></p><p>2.对于逻辑回归模型，除了计算代价函数<img src="https://s2.ax1x.com/2019/04/13/AL18fA.png" alt="AL18fA.png"></p><p>更常见的方法是计算误分类的比例（0/1错误分类度量）<img src="https://s2.ax1x.com/2019/04/13/AqjGxf.png" alt="AqjGxf.png"></p><h3 id="模型选择和交叉验证集"><a href="#模型选择和交叉验证集" class="headerlink" title="模型选择和交叉验证集"></a>模型选择和交叉验证集</h3><p>当模型确定的时候可以使用上一节的方法来验证，但是如何确定一个模型呢？首先需要知道，正则化惩罚项系数$\lambda$的选择；增加多项式特征时，多项式的次数等这类问题，称为模型选择问题。</p><p>假设我们的输入特征只有一个时，拟合效果是非常不理想的。因此，我们通常会增加特征项，那么问题又来了，多项式特征的次数应该怎么选取，即到底选取什么样的模型（假设）？</p><p>我们可以罗列出多种情况</p><p><img src="https://s2.ax1x.com/2019/04/13/AqvWX8.md.png" alt="AqvWX8.md.png"></p><p>这时再将数据集划分成训练集和测试集，对这些假设分别在训练集上训练，通过最小化训练集的代价，求出最优参数$\Theta_{1}$~$\Theta_{10}$。将其代入测试集，计算每个模型的误差，选择误差最小的那组作为假设，并把这组的误差值作为泛化误差。</p><p>然而其中存在一个问题：通过测试集来选取模型，又用测试集来求泛化误差，显然是不是坠吼滴。</p><p>因此，我们重新划分数据集的比例，训练集：<strong>交叉验证集(Cross Validation set)</strong>：测试集=60:20:20</p><p><img src="https://s2.ax1x.com/2019/04/13/Aqzdde.md.png" alt="Aqzdde.md.png"></p><p>然后计算选择出模型：</p><p>1.用训练集训练出$\Theta_{1}$~$\Theta_{10}$;</p><p>2.用交叉验证集计算出最小误差，选择误差最小的模型;</p><p>3.用第2步中选择的模型计算测试集得出泛化误差。</p><p><strong><em>Train/validation/test error</em></strong></p><p><strong>Training error:</strong></p><p>​            <img src="https://s2.ax1x.com/2019/04/24/EVNxVs.png" alt="EVNxVs.png"></p><p><strong>Cross Validation error:</strong></p><p>​            <img src="https://s2.ax1x.com/2019/04/24/EVUS5q.png" alt="EVUS5q.png"></p><p><strong>Test error:</strong></p><p>​            <img src="https://s2.ax1x.com/2019/04/24/EVUCGV.png" alt="EVUCGV.png"></p><blockquote><p>上面说到的，是关于如何改变特征来减小误差，而接下来的内容则和正则化$\lambda$有关</p></blockquote><h3 id="诊断偏差和方差"><a href="#诊断偏差和方差" class="headerlink" title="诊断偏差和方差"></a>诊断偏差和方差</h3><p>当运行结果不理想时，多半有两种情况：<strong>过拟合</strong>或者<strong>欠拟合</strong>。而这两种情况，哪种和高偏差有关？哪种和高方差有关？还是都有关系？</p><p><img src="https://s2.ax1x.com/2019/04/13/ALkcV0.md.png" alt="ALkcV0.md.png"></p><p>从图中可以看出，欠拟合时高偏差，过拟合时高方差。那么在没法画图的情况下（基本都是这种情况）如何来确定是高偏差还是高方差呢？</p><p>方法如下：</p><p><img src="https://s2.ax1x.com/2019/04/13/ALAvkV.png" alt="ALAvkV.png"></p><p>将训练集误差和验证集误差绘制在图中，其中横坐标为多项式次数。</p><p><strong>Training error:</strong>                               <img src="https://s2.ax1x.com/2019/04/24/EVUP2T.png" alt="EVUP2T.png"></p><p><strong>Cross Validation error:</strong>                <img src="https://s2.ax1x.com/2019/04/24/EVUkMF.png" alt="EVUkMF.png"></p><p>可以明显看出</p><ul><li>对于训练集，d越大，误差越小</li><li>对于验证集，随着d增长，误差会先减小后增大，其中的最低点就是开始过拟合的情况。</li></ul><p>那么当我们在没有图像的情况下，得出验证集误差较大时，只需要根据训练集误差的大小就能得出是高偏差还是高方差了。</p><p><img src="https://s2.ax1x.com/2019/04/13/ALE10I.md.png" alt="ALE10I.md.png"></p><p>具体来说，就是：</p><ul><li>训练集误差和交叉验证集误差近似时：偏差/欠拟合</li><li>交叉验证集误差远大于训练集误差时：方差/过拟合</li></ul><h3 id="正则化和偏差、方差"><a href="#正则化和偏差、方差" class="headerlink" title="正则化和偏差、方差"></a>正则化和偏差、方差</h3><p>正则化常常用来解决过拟合问题，但是对于正则化项参数$\lambda$，如下图所示不同的选取可能会导致不同的偏差问题，那么应该如何选择合适的值呢？</p><p><img src="https://s2.ax1x.com/2019/04/13/AL8954.md.png" alt="AL8954.md.png"></p><p>我们先选择一系列想要测试的$\lambda$，通常是0~12之间呈现2倍的关系，例如：$0,0.01,0.02,0.04,0.08,0.15,0.32,0.64,1.28,2.56,5.12,10$（共12个）。</p><p>再像之前那样，把数据集划分为训练集、验证集和测试集。但是因为之前我们都是不带正则化，所以$J(\theta)$和$J_{train}(\theta)$是一样的，但是这里就要如下图中的那样分开。</p><p><img src="https://s2.ax1x.com/2019/04/13/AL8MPH.md.png" alt="AL8MPH.md.png"></p><p>先在训练集上用最小化代价函数，求得最优的一组参数。然后再用该参数在训练/验证/测试集上根据公式计算相应误差。</p><p>（这里存疑？关于$J(\theta)$和$J_{train}(\theta)$什么时候使用）</p><p><img src="https://s2.ax1x.com/2019/04/13/ALJn9H.md.png" alt="ALJn9H.md.png"></p><p>具体步骤如下：</p><p>1.先对每个$\lambda$值，求对应最小化代价函数的参数</p><p><img src="https://s2.ax1x.com/2019/04/13/ALJ0uq.png" alt="ALJ0uq.png"></p><p>2.将上述求得的参数，代入交叉验证集计算代价函数$J_{cv}(\theta)$，选择对应最小代价函数的$\theta$作为最优模型参数。</p><p>3.代入测试集$J_{test}(\theta)$计算泛化误差。</p><p>还可以把验证集误差和训练集误差绘制成图，横坐标为$\lambda$。</p><p><img src="https://s2.ax1x.com/2019/04/13/ALw9I0.md.png" alt="ALw9I0.md.png"></p><p>可以看出：</p><ul><li>当$\lambda$较小时，$J_{train}(\theta)$值较小，$J_{cv}(\theta)$值较大，过拟合</li><li>当$\lambda$较大时，$J_{train}(\theta)$值较大，$J_{cv}(\theta)$值较大，欠拟合</li></ul><h3 id="学习曲线"><a href="#学习曲线" class="headerlink" title="学习曲线"></a>学习曲线</h3><p>学习曲线是一个非常好的工具，用于判断模型偏差、方差问题。它是一个以<strong>样本个数</strong>为横坐标，以<strong>误差</strong>为纵坐标绘制的图像。</p><h4 id="1-如何利用学习曲线识别高偏差？"><a href="#1-如何利用学习曲线识别高偏差？" class="headerlink" title="1.如何利用学习曲线识别高偏差？"></a>1.如何利用学习曲线识别高偏差？</h4><p><img src="https://s2.ax1x.com/2019/04/13/AL2J9s.md.png" alt="AL2J9s.md.png"></p><p>从图中可以看出，对于欠拟合而言，增加样本个数没有意义，因为模型拟合能力差，没有能力去关注”细节“。</p><p><img src="https://s2.ax1x.com/2019/04/13/AL2wHU.png" alt="AL2wHU.png"></p><p>从这张图中也可以看出，当样本到达一定数量时，训练集合测试集的误差会非常接近且不再变化，但高于我们期望的误差。</p><h4 id="如何利用学习曲线识别高方差？"><a href="#如何利用学习曲线识别高方差？" class="headerlink" title="如何利用学习曲线识别高方差？"></a>如何利用学习曲线识别高方差？</h4><p><img src="https://s2.ax1x.com/2019/04/13/ALfbvR.md.png" alt="ALfbvR.md.png"></p><p>可以看出在过拟合情况下，增加数据，可能可以提高算法效果。</p><p><img src="https://s2.ax1x.com/2019/04/13/ALh3q0.png" alt="ALh3q0.png"></p><p>增加样本个数会小幅度提高训练集误差，但是始终维持在一个相对较低的水平。而验证集个数增加为增进模型对数据的了解，因此会验证集误差会减小</p><blockquote><p>上面的test error和cross validation error用哪个效果都一样。</p></blockquote><h4 id="决定下一步做什么？-1"><a href="#决定下一步做什么？-1" class="headerlink" title="决定下一步做什么？"></a>决定下一步做什么？</h4><p>如何通过这些诊断法来帮助我们选择改进模型的方法呢？回到最初的问题上</p><ol><li>获得更多的训练样本——解决高方差</li><li>尝试减少特征的数量——解决高方差</li><li>尝试获得更多的特征——解决高偏差</li><li>尝试增加多项式特征——解决高偏差</li><li>尝试减少正则化程度λ——解决高偏差</li><li>尝试增加正则化程度λ——解决高方差</li></ol><p><strong>神经网络</strong></p><p><img src="https://s2.ax1x.com/2019/04/14/AOn2b4.md.png" alt="AOn2b4.md.png"></p><p>使用神经元较少的神经网络（左图）跟参数较少时情况类似，容易导致高偏差和欠拟合；同理，神经元较多（右图）这容易导致高方差，可以使用正则化手段来解决。</p><p>一般使用神经元较多的情况比较好处理。当然你也可以同样把数据集划分为训练集、交叉验证集和测试集。然后从一层隐藏层开始逐一尝试。找到验证集误差最小的作为模型。</p><h2 id="机器学习系统设计"><a href="#机器学习系统设计" class="headerlink" title="机器学习系统设计"></a>机器学习系统设计</h2><h3 id="确定执行的优先级"><a href="#确定执行的优先级" class="headerlink" title="确定执行的优先级"></a>确定执行的优先级</h3><p>以建立一个垃圾邮件分类器为例</p><h5 id="step1-用向量表示邮件"><a href="#step1-用向量表示邮件" class="headerlink" title="step1.用向量表示邮件"></a>step1.用向量表示邮件</h5><p>输入变量x为邮件的特征；y表示邮件的标签，1代表垃圾邮件，0代表不是。</p><p>我们可以人工选择100个单词作为词典，然后比对邮件中单词是否出现，出现则记为1，未出现记为0（注意不是记录出现个数），因此能够得到下图中的100维向量，这个向量作为输入。</p><p><img src="https://s2.ax1x.com/2019/04/24/EV3bgH.md.png" alt="EV3bgH.md.png"></p><blockquote><p>实际上，我们不会人工选择单词构成字典，而是在训练集中自动选择出现频率最高的n(10000-50000)个单词构成字典,然后用一个n维的特征向量来表示邮件。</p></blockquote><h5 id="step2-想办法降低分类的错误率"><a href="#step2-想办法降低分类的错误率" class="headerlink" title="step2.想办法降低分类的错误率"></a>step2.想办法降低分类的错误率</h5><p>1.收集更多的训练数据，但这种要视情况而定。</p><p>2.为每个邮件设计更复杂的特征，比如把邮件正文标题也考虑进去</p><p>3.为邮件的正文设计更复杂的特征，比如单词的单复数，discount和discounts是否应该看成一个单词；首字母大小、后缀，deal和Dealer是否应该看作一个单词；是否应该考虑标点符号，可能垃圾邮件中叹号会比较多。</p><p>4.构建更复杂的算法来检测邮件中的错误拼写，比如垃圾邮件发送者经常把一些容易被检测到的单词写错，如m0rtgage，med1cine，w4tches等，从而避免被检测到。</p><p>当然上述方法如何选择，同样也是个问题。</p><h3 id="误差分析"><a href="#误差分析" class="headerlink" title="误差分析"></a>误差分析</h3><p>当你准备好构建一个机器学习系统时，最好的方式是先用简单的方法快速实现。具体来说：</p><p>1.从一个简单的能快速实现的算法开始，实现该算法并用交叉验证集数据测试。</p><p>2.绘制学习曲线，判断是高偏差或是高方差，决定是增加更多的数据还是添加更多的特征。</p><p>3.<strong>误差分析：</strong>人工观察交叉验证集，看看被分错的样本是否具有某些规律。</p><ul><li>举个误差分析的例子：</li></ul><p>假设验证集有500个样本，$m_{cv}=500$，分类器分错了100个样本，此时可以人工检查这100个错误：首先分析这100个样本的错分类型和数量。如下所示：</p><p><img src="https://s2.ax1x.com/2019/04/24/EVYC8O.png" alt="EVYC8O.png"></p><p>卖药的邮件12封，卖假货的邮件4封，钓鱼的邮件53封，其他的31封；那么我们就可以把关注点放在钓鱼邮件上。</p><p>然会继续对钓鱼邮件分析，是否可以发现一些新的特征。能够提高分类器的的性能，比如这些钓鱼邮件存在以下几个问题：</p><p><img src="https://s2.ax1x.com/2019/04/24/EVYArd.png" alt="EVYArd.png"></p><p>我们又可以把关注点放在“不常用的标点”这一项上，毕竟有32封邮件都存在该问题，进而设计一些包含标点的更复杂的特征，以此提高性能。</p><ul><li>数值评估：</li></ul><p>在做垃圾邮件分类时，可能会遇到这种问题：</p><p>应不应该把discount,discounts,discounted,discounting看作是同一个单词,即是否看成一个特征。</p><p>在自然语言处理中会使用词干提取，在这种情况下，上述单词会被看作是同一个。但是词干提取有利有弊，这种方法通常指关注前几个字母，比如它可能会把universe/university看作一个单词，这显然不合理。</p><p>那么我们到底要不要使用词干提取？这时我们可以使用数值评估的方法：</p><p>首先使用词干提取，训练一个分类器，在验证集上计算它的错误率；然后不使用词干提取，训练一个分类器，在验证集上计算它的错误率。二者进行比较，哪个错误率低，就使用哪种方法。</p><p>类似的这种问题，还包括是否应该区分单词大小写，如mom和Mom是否应该看作一个单词，都可以使用上述数值评估的方法，选择一个合理的做法。</p><h3 id="不对称分类的误差评估"><a href="#不对称分类的误差评估" class="headerlink" title="不对称分类的误差评估"></a>不对称分类的误差评估</h3><p>我们通常用错误率/正确率来评估一个算法，但有时这种方法是不合适的，比如偏斜类问题。</p><p><img src="https://s2.ax1x.com/2019/04/24/EEHJrF.md.png" alt="EEHJrF.md.png"></p><p>以这个判断肿瘤恶性/良性的分类器为例，如果分类器错误率为1%，而实际只有0.5%的病人肿瘤为恶性。这种情况下，尽管错误率看起来非常低，也可能造成严重后果。此时哪怕直接把所有病人都认为良性，也只有0.5%的错误率，高于分类器。</p><p>这就是<strong>偏斜类</strong>问题，情况表现为训练集中同一种类样本非常多，而其他类样本样本比较少。</p><blockquote><p>那么如何解决偏斜类问题？换句话说，如何知道算法把所有病人都认为良性而没有做出真正的分类？</p></blockquote><p>可以使用查准率(<strong>Precision</strong>)和召回率(<strong>Recall</strong>)。</p><blockquote><p>召回率又可以叫做<strong>查全率</strong>，事实上叫查全率显然更符合其含义</p></blockquote><p>我的理解，查准率指预测正确的样本个数占样本总数的多少；查全率指预测正确的样本个数占实际正确的样本个数。</p><p>还是以上面肿瘤的例子</p><p><img src="https://s2.ax1x.com/2019/04/24/EELpE4.png" alt="EELpE4.png"></p><p>准确率等于True positive除以一行；</p><p>召回率等于True positive除以一列；</p><p>由此可以看出，当使用<code>y=0</code>（把所有病人判断为良性）的方法预测时，召回率为0，由此可以排除。</p><h3 id="查准率和召回率的均衡"><a href="#查准率和召回率的均衡" class="headerlink" title="查准率和召回率的均衡"></a>查准率和召回率的均衡</h3><p>在肿瘤例子中，我们一般情况下设置分类的阈值为0.5。</p><p><img src="https://s2.ax1x.com/2019/04/24/EEzys1.png" alt="EEzys1.png"></p><ul><li>我们可能需要在非常准确的情况下，才去预测肿瘤为恶性，否则让良性肿瘤的病人去接受治疗，那肯定要被骂，因此这时候我们需要高查准率，因此可以调高阈值为0.7或0.9，可以更准确的预测出恶性肿瘤。但此时明显，召回率就被降低了</li><li>但召回率的降低可能导致更多恶性肿瘤的情况被归类为良性肿瘤，这种情况也是我们不愿见到的，因此我们也可能想调高召回率。</li></ul><p>由此可以画出查准率和召回率的图像：</p><p><img src="https://s2.ax1x.com/2019/04/24/EVPm4K.png" alt="EVPm4K.png"></p><p>综上，我们需要向办法设置合适的阈值，以达到查准率和召回率的平衡。</p><p>通常使用$F_{1}score$来权衡，计算公式为${ {F}_{1} }Score:2\frac{PR}{P+R}$，$F_{1}score$值越高，模型的性能越好。</p><h3 id="机器学习数据"><a href="#机器学习数据" class="headerlink" title="机器学习数据"></a>机器学习数据</h3><p>之前曾经说过，不要盲目的收集大量训练数据。</p><p>但是有些时候，收集大量数据会得到一个性能良好的学习算法。</p><p>即当你的算法有很多参数，数据特征充足（当一个人类专家拿到输入x时，能做出良好的判断，证明特征充足）时，更多的训练数据会带来更好的性能。</p><p><strong>参考资料</strong></p><p>[1] <a href="https://blog.csdn.net/sdu_hao/article/details/84026798#7.%E5%86%B3%E5%AE%9A%E6%8E%A5%E4%B8%8B%E6%9D%A5%E5%81%9A%E4%BB%80%E4%B9%88" target="_blank" rel="noopener">机器学习 | 吴恩达机器学习第六周学习笔记</a></p><p>[2] <a href="https://zhuanlan.zhihu.com/p/28409180" target="_blank" rel="noopener">机器学习笔记（3）—— 优化，偏差和方差，偏斜数据 - 关右的文章 - 知乎</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;运用机器学习建议&quot;&gt;&lt;a href=&quot;#运用机器学习建议&quot; class=&quot;headerlink&quot; title=&quot;运用机器学习建议&quot;&gt;&lt;/a&gt;运用机器学习建议&lt;/h2&gt;&lt;h3 id=&quot;决定下一步做什么？&quot;&gt;&lt;a href=&quot;#决定下一步做什么？&quot; class=&quot;headerlink&quot; title=&quot;决定下一步做什么？&quot;&gt;&lt;/a&gt;决定下一步做什么？&lt;/h3&gt;&lt;p&gt;当你的模型运用于新的样本时，如果产生巨大的误差该怎么办？&lt;/p&gt;
&lt;p&gt;一般来说，有以下几种处理方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获得更多的训练样本——通常是有效的，但代价较大，下面的方法也可能有效，可考虑先采用下面的几种方法。&lt;/li&gt;
&lt;li&gt;尝试减少特征的数量&lt;/li&gt;
&lt;li&gt;尝试获得更多的特征&lt;/li&gt;
&lt;li&gt;尝试增加多项式特征&lt;/li&gt;
&lt;li&gt;尝试减少正则化程度$\lambda$&lt;/li&gt;
&lt;li&gt;尝试增加正则化程度$\lambda$&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然我们不可能随机去一个个方法尝试，所以需要一点手段来预测。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib坐标原点不重合</title>
    <link href="http://yoursite.com/2019/04/15/matplotlib%E5%9D%90%E6%A0%87%E5%8E%9F%E7%82%B9%E4%B8%8D%E9%87%8D%E5%90%88/"/>
    <id>http://yoursite.com/2019/04/15/matplotlib坐标原点不重合/</id>
    <published>2019-04-15T02:22:16.000Z</published>
    <updated>2019-04-24T07:37:43.663Z</updated>
    
    <content type="html"><![CDATA[<p>用matplotlib画图时会遇到原点不重合在左下角的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fig,ax=plt.subplots(figsize=(<span class="number">8</span>,<span class="number">5</span>))</span><br><span class="line">    ax.plot(range(<span class="number">1</span>,<span class="number">13</span>),error_train,label=<span class="string">"Train"</span>)</span><br><span class="line">    ax.plot(range(<span class="number">1</span>,<span class="number">13</span>),error_cv,label=<span class="string">"Cross Validation"</span>,color=<span class="string">"green"</span>)</span><br><span class="line">    ax.legend()</span><br><span class="line">    plt.xlabel(<span class="string">"Number of training examples"</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'error'</span>)</span><br><span class="line">    plt.title(<span class="string">'Learning curve of linear regression'</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://s2.ax1x.com/2019/04/15/AXb0a9.md.png" alt="AXb0a9.md.png"></p><p>只需要添加两行代码即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">plt.ylim(bottom=<span class="number">0</span>)</span><br><span class="line">plt.xlim(left=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/04/15/AXqoTJ.md.png" alt="AXqoTJ.md.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用matplotlib画图时会遇到原点不重合在左下角的情况&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fig,ax=plt.subplots(figsize=(&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ax.plot(range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;),error_train,label=&lt;span class=&quot;string&quot;&gt;&quot;Train&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ax.plot(range(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;),error_cv,label=&lt;span class=&quot;string&quot;&gt;&quot;Cross Validation&quot;&lt;/span&gt;,color=&lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ax.legend()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plt.xlabel(&lt;span class=&quot;string&quot;&gt;&quot;Number of training examples&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plt.ylabel(&lt;span class=&quot;string&quot;&gt;&#39;error&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plt.title(&lt;span class=&quot;string&quot;&gt;&#39;Learning curve of linear regression&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="matplotlib" scheme="http://yoursite.com/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>机器学习|吴恩达机器学习之神经网络反向传播</title>
    <link href="http://yoursite.com/2019/04/12/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD/"/>
    <id>http://yoursite.com/2019/04/12/机器学习-吴恩达机器学习之神经网络反向传播/</id>
    <published>2019-04-12T09:01:04.000Z</published>
    <updated>2019-04-12T14:25:47.805Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正向传播"><a href="#正向传播" class="headerlink" title="正向传播"></a>正向传播</h2><p>和<a href="https://nullblog.top/2019/04/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/" target="_blank" rel="noopener">机器学习|吴恩达机器学习之神经网络</a>中的内容差不多，都是在给出$\Theta_{(1)}$和$\Theta_{(2)}$的情况下通过正向传播求个代价值或是验证一下准确率。</p><a id="more"></a><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_mat</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="string">'''读取数据'''</span></span><br><span class="line">    data = loadmat(<span class="string">'ex4data1.mat'</span>)  <span class="comment"># return a dict</span></span><br><span class="line">    X = data[<span class="string">'X'</span>]</span><br><span class="line">    y = data[<span class="string">'y'</span>].flatten()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> X, y  </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_weight</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''读取权重'''</span></span><br><span class="line">    weight = loadmat(<span class="string">'ex4weights.mat'</span>)</span><br><span class="line">    theta1 = weight[<span class="string">'Theta1'</span>]</span><br><span class="line">    theta2 = weight[<span class="string">'Theta2'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> theta1, theta2</span><br></pre></td></tr></table></figure><p>这里需要对y向量做一个处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">expand_y</span><span class="params">(y)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> y:</span><br><span class="line">        y_array = np.zeros(<span class="number">10</span>)</span><br><span class="line">        y_array[i - <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">        result.append(y_array)</span><br><span class="line">    <span class="keyword">return</span> np.array(result)</span><br></pre></td></tr></table></figure><p>原来的y是用数字表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">10</span> <span class="number">10</span> <span class="number">10</span> ...  <span class="number">9</span>  <span class="number">9</span>  <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>转换为矩阵，用1的位置来表示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> ... <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> ... <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> ... <span class="number">0.</span> <span class="number">0.</span> <span class="number">1.</span>]</span><br><span class="line"> ...</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> ... <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> ... <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span>]</span><br><span class="line"> [<span class="number">0.</span> <span class="number">0.</span> <span class="number">0.</span> ... <span class="number">0.</span> <span class="number">1.</span> <span class="number">0.</span>]]</span><br></pre></td></tr></table></figure><h4 id="可视化数据"><a href="#可视化数据" class="headerlink" title="可视化数据"></a>可视化数据</h4><p>随机选100张图，可视化观察一波</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_data</span><span class="params">(X)</span>:</span></span><br><span class="line">    <span class="string">'''随机画100个数字'''</span></span><br><span class="line">    index = np.random.choice(range(<span class="number">5000</span>),</span><br><span class="line">                             <span class="number">100</span>)  <span class="comment"># np.random.choice(arrange,size),返回ndarray</span></span><br><span class="line">    images = X[index]  <span class="comment"># 随机选择100个样本</span></span><br><span class="line">    fig, ax_array = plt.subplots(</span><br><span class="line">        <span class="number">10</span>, <span class="number">10</span>, sharex=<span class="keyword">True</span>, sharey=<span class="keyword">True</span>, figsize=(<span class="number">8</span>, <span class="number">8</span>))  <span class="comment"># ax_array为Axes对象</span></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            ax_array[r, c].matshow(</span><br><span class="line">                images[r * <span class="number">10</span> + c].reshape(<span class="number">20</span>, <span class="number">20</span>), cmap=<span class="string">'gray_r'</span></span><br><span class="line">            )  <span class="comment"># matshow() 第一个参数为要显示的矩阵（Display an array as a matrix in a new  figure window）</span></span><br><span class="line">    plt.yticks([])</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>关于<code>plt.subplots</code>展开，参考<a href="https://nullblog.top/2019/04/07/subplots%E7%94%BB%E5%9B%BE/#more" target="_blank" rel="noopener">subplots画图</a>。</p><h3 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h3><p>因为反向传播和正向传播的公式，代价函数，正则化都是一样的，在后面反向传播再展开讲。</p><h4 id="正向传播-1"><a href="#正向传播-1" class="headerlink" title="正向传播"></a>正向传播</h4><p>1.公式：</p><p><img src="https://s2.ax1x.com/2019/04/11/A7xwiq.png" alt="A7xwiq.png"></p><p>2.代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feed_forward</span><span class="params">(theta1, theta2, X)</span>:</span></span><br><span class="line">    z2 = X @ theta1.T</span><br><span class="line">    a2 = sg.sigmoid(z2)  <span class="comment">#(5000,25)</span></span><br><span class="line">    a2 = np.insert(a2, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)  <span class="comment">#(5000,26)</span></span><br><span class="line">    z3 = a2 @ theta2.T</span><br><span class="line">    a3 = sg.sigmoid(z3)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> z2, a2, z3, a3</span><br></pre></td></tr></table></figure><h4 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h4><p>1.公式：$J(\theta)=\frac{1}{m} \sum_{i=1}^{m} \sum_{k=1}^{K}\left[-y_{k}^{(i)} \log \left(\left(h_{\theta}\left(x^{(i)}\right)\right)_{k}\right)-\left(1-y_{k}^{(i)}\right) \log \left(1-\left(h_{\theta}\left(x^{(i)}\right)\right)_{k}\right)\right.$</p><p>2.代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span><span class="params">(theta1, theta2, X, y)</span>:</span></span><br><span class="line">    z2, a2, z3, h = feed_forward(theta1, theta2, X)</span><br><span class="line">    <span class="comment"># 这里的y是矩阵而不是向量了</span></span><br><span class="line">    first = -y * np.log(h)</span><br><span class="line">    second = (<span class="number">1</span> - y) * np.log(<span class="number">1</span> - h)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (np.sum(first - second)) / len(X)  <span class="comment"># 这里不能用np.mean()，否则会相差10倍</span></span><br></pre></td></tr></table></figure><h4 id="代价函数正则化"><a href="#代价函数正则化" class="headerlink" title="代价函数正则化"></a>代价函数正则化</h4><p>1.公式：</p><p>$\begin{aligned} J(\theta)=&amp; \frac{1}{m} \sum_{i=1}^{m} \sum_{k=1}^{K}\left[-y_{k}^{(i)} \log \left(\left(h_{\theta}\left(x^{(i)}\right)\right)_{k}\right)-\left(1-y_{k}^{(i)}\right) \log \left(1-\left(h_{\theta}\left(x^{(i)}\right)\right)_{k}\right)\right]+\\ &amp; \frac{\lambda}{2 m}\left[\sum_{j=1}^{25} \sum_{k=1}^{400}\left(\Theta_{j, k}^{(1)}\right)^{2}+\sum_{j=1}^{10} \sum_{k=1}^{25}\left(\Theta_{j, k}^{(2)}\right)^{2}\right] \end{aligned}$</p><p>2.代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost_reg</span><span class="params">(theta1, theta2, X, y, lmd)</span>:</span></span><br><span class="line">    c = cost(theta1, theta2, X, y)</span><br><span class="line">    reg = (lmd / (<span class="number">2</span> * len(X))) * (</span><br><span class="line">        np.sum(theta1[:, <span class="number">1</span>:]**<span class="number">2</span>) + np.sum(theta2[:, <span class="number">1</span>:]**<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> reg + c</span><br></pre></td></tr></table></figure><h4 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    path = <span class="string">'ex4data1.mat'</span></span><br><span class="line">    X, y = load_mat(path)</span><br><span class="line">    X = np.insert(X, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br><span class="line">    y = expand_y(y)</span><br><span class="line">    theta1, theta2 = load_weight()</span><br><span class="line">    print(cost_reg(theta1, theta2, X, y, <span class="number">1</span>))  <span class="comment">#0.38376985909092354</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2><h4 id="随机初始化"><a href="#随机初始化" class="headerlink" title="随机初始化"></a>随机初始化</h4><p>之前我们是把$\theta​$初始化为0向量，但是在神经网络中如果把$\theta_{1}​$初始化为0，那么$S_{2}​$中的激活单元都为相同值。同理，只要初始化为相同的数，那么结果都一样。</p><p>因此我们通常随机初始化，即在（-$\varepsilon$，$\varepsilon$）之间随机取值，为了保证效率，需要取值足够小，所以选择$\varepsilon=0.12$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">random_init</span><span class="params">(size)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> np.random.uniform(<span class="number">-0.12</span>, <span class="number">0.12</span>, size)</span><br></pre></td></tr></table></figure><h4 id="处理参数"><a href="#处理参数" class="headerlink" title="处理参数"></a>处理参数</h4><p>使用优化参数<code>opt.minimize()</code>，需要把参数展开。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">serialize</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">'''展开参数'''</span></span><br><span class="line">    <span class="keyword">return</span> np.r_[a.flatten(), b.flatten()]  <span class="comment"># 按行拼接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deserialize</span><span class="params">(seq)</span>:</span></span><br><span class="line">    <span class="string">'''提取参数'''</span></span><br><span class="line">    <span class="keyword">return</span> seq[:<span class="number">25</span> * <span class="number">401</span>].reshape(<span class="number">25</span>, <span class="number">401</span>), seq[<span class="number">25</span> * <span class="number">401</span>:].reshape(<span class="number">10</span>, <span class="number">26</span>)</span><br></pre></td></tr></table></figure><h4 id="代价函数（带正则项）"><a href="#代价函数（带正则项）" class="headerlink" title="代价函数（带正则项）"></a>代价函数（带正则项）</h4><p>以多分类为例</p><p>1.公式：<img src="https://s2.ax1x.com/2019/04/06/AW7Z40.md.png" alt="AW7Z40.md.png"></p><p>其中</p><ul><li>L：神经网络的层数</li><li>$s_{l}​$：$l​$层中的神经元个数（不包括bias unit）</li><li>K：输出层中的神经元个数</li><li>m：样本个数</li></ul><p><img src="https://s2.ax1x.com/2019/04/06/AW7hrQ.png" alt="AW7hrQ.png"></p><p>累加项中表示从第一项累加到第k项（why？）</p><p>正则项表示神经网络中所有权重的平方和。</p><h4 id="梯度项"><a href="#梯度项" class="headerlink" title="梯度项"></a>梯度项</h4><p><img src="https://s2.ax1x.com/2019/04/08/A4jwvR.png" alt="A4jwvR.png"></p><p>一般情况下，我们只知道Input Layer和Output Layer两层的神经元个数，中间的Hidden Layer很难确定，不过对于初学者而言，都是参考别人算法里的，所以这里也直接给出了Hidden Layer的层数（1层）以及$\theta_{1}$（25，401）和$\theta_{2}$（10，26）的维度，一个神经元为一列。</p><h5 id="计算前馈-feedforward"><a href="#计算前馈-feedforward" class="headerlink" title="计算前馈(feedforward)"></a>计算前馈(feedforward)</h5><p>参数含义及传递过程如下</p><p>1.参数含义：</p><ul><li>$\Theta^{i}​$第$i​$层的参数矩阵</li><li>$z^{(l)}$第$l$层的输入</li><li>$a^{(l)}$第$l$层的输出</li></ul><p>2.传递过程：</p><ul><li>$a^{(1)}=x​$</li><li>$z^{(2)}=\Theta^{(1)} a^{(1)}​$</li><li>$a^{(2)}=g\left(z^{(2)}\right)\left(a d d \ bias \ \ a_{0}^{(2)}\right)​$</li><li>$z^{(3)}=\Theta^{(2)} a^{(2)}​$</li><li>$h=a^{(3)}=g\left(z^{(3)}\right)​$</li></ul><p>3.前馈代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feed_forward</span><span class="params">(theta1, theta2, X)</span>:</span></span><br><span class="line">    z2 = X @ theta1.T</span><br><span class="line">    a2 = sg.sigmoid(z2)  <span class="comment">#(5000,25)</span></span><br><span class="line">    a2 = np.insert(a2, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)  <span class="comment">#(5000,26)</span></span><br><span class="line">    z3 = a2 @ theta2.T</span><br><span class="line">    a3 = sg.sigmoid(z3) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> z2, a2, z3, a3</span><br></pre></td></tr></table></figure><h5 id="计算梯度项"><a href="#计算梯度项" class="headerlink" title="计算梯度项"></a>计算梯度项</h5><p>计算梯度项，也就是代价函数的偏导数$\frac{\partial}{\partial\Theta^{(l)}_{ij}}J\left(\Theta\right)​$。通过前馈的计算我们得到了$h​$，接下来计算“误差”，这里之所以用引号，是因为误差的实质是$\delta^{(l)}=\frac{\partial J}{\partial z^{(l)}}​$</p><ul><li>$\delta^{(3)}=h-y​$ ……(1)</li><li>$\delta^{(2)}=(\Theta^{(2)})^{T}\delta^{(3)}g^{\prime}\left(z^{(2)}\right)$……(2)</li></ul><p>第一层没有误差，接下去计算每层参数矩阵的<strong>梯度值</strong>，用$\Delta^{(l)}$表示</p><ul><li>$\Delta^{(2)}=a^{(2)} \delta^{(3)}$……(3)</li><li>$\Delta^{(1)}=a^{(1)} \delta^{(2)}​$……(4)</li></ul><p>最后网络的总梯度为：</p><p>（这里并不是真的相加，而是将$\Delta^{(1)}$和$\Delta^{(2)}$合成为一个向量，方便后面计算）</p><p>$D=\frac{1}{m}\left(\Delta^{(1)}+\Delta^{(2)}\right)$</p><p>求梯度项代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient</span><span class="params">(theta1,theta2,X,y)</span>:</span></span><br><span class="line">    z2,a2,z3,h=feed_forward(theta1,theta2,X)</span><br><span class="line">    d3=h-y <span class="comment"># (5000,10) </span></span><br><span class="line">    d2=d3@theta2[:,<span class="number">1</span>:]*sg.sigmoid_gradient(z2) <span class="comment"># (5000,25)</span></span><br><span class="line">    D2=d3.T@a2 <span class="comment"># (10,26)</span></span><br><span class="line">    D1=d2.T@X <span class="comment"># (25,401)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 这里合并成1-D array是为了方便后面用优化函数处理</span></span><br><span class="line">    D=(<span class="number">1</span>/len(X))*serialize(D1,D2) <span class="comment">#(10285,)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> D</span><br></pre></td></tr></table></figure><p><strong>正则化</strong></p><p>1.原理</p><p><img src="https://s2.ax1x.com/2019/04/09/AI71Yj.png" alt="AI71Yj.png"></p><p>2.代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">regularized_gradient</span><span class="params">(theta,X,y,lmd=<span class="number">1</span>)</span>:</span></span><br><span class="line">    theta1,theta2=deserialize(theta)</span><br><span class="line">    D1,D2=deserialize(gradient(theta1,theta2,X,y))</span><br><span class="line">    theta1[:,<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">    theta2[:,<span class="number">0</span>]=<span class="number">0</span></span><br><span class="line">    reg_D1=D1+(lmd/len(X))*theta1</span><br><span class="line">    reg_D2=D2+(lmd/len(X))*theta2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> serialize(reg_D1,reg_D2)</span><br></pre></td></tr></table></figure><h5 id="推导-delta-和-Delta"><a href="#推导-delta-和-Delta" class="headerlink" title="*推导$\delta$和$\Delta$"></a>*推导$\delta$和$\Delta$</h5><p>从代价函数入手，假设我们只有一个输入样本，那么代价函数为：$J(\theta)=-y \operatorname{logh}(x)-(1-y) \log (1-h)$，所谓梯度项，就是将代价函数对参数求导，即$\frac{\partial}{\partial \Theta^{(2)}} J(\theta), \frac{\partial}{\partial \Theta^{(1)}} J(\theta)$。而由传递过程函数：</p><ul><li>$a^{(1)}=x$</li><li>$z^{(2)}=\Theta^{(1)} a^{(1)}$</li><li>$a^{(2)}=g\left(z^{(2)}\right)\left(a d d \ bias \ \ a_{0}^{(2)}\right)$</li><li>$z^{(3)}=\Theta^{(2)} a^{(2)}$</li><li>$h=a^{(3)}=g\left(z^{(3)}\right)​$</li></ul><p>我们可以使用链式求导法则，因此有$\frac{\partial J}{\partial \Theta^{(2)}}=\frac{\partial J}{\partial a^{(3)}} \frac{\partial a^{(3)}}{\partial z^{(3)}} \frac{\partial z^{(3)}}{\partial \Theta^{(2)}}=(h-y)a^{(2)}​$</p><p>其中令$\delta^{(3)}=h-y​$得到公式(1)；令$\Delta^{(2)}=\frac{\partial J}{\partial \Theta^{(2)}}​$则得到公式(3)。</p><p>接着求$\frac{\partial J}{\partial \Theta^{(1)}}​$=$\frac{\partial J}{\partial a^{(3)}} \frac{\partial a^{(3)}}{\partial z^{(3)}} \frac{\partial z^{(3)}}{\partial a^{(2)}} \frac{\partial a^{(2)}}{\partial z^{(2)}} \frac{\partial z^{(2)}}{\partial \Theta^{(1)}}​$</p><p>​            =$\delta^{(3)} \Theta^{(2)} g^{\prime}\left(Z^{(2)}\right) a^{(1)}​$</p><p>​            =$\delta^{(2)} a^{(1)}​$</p><p>同样可以看出，令$\delta^{(3)}=\frac{\partial J}{\partial a^{(3)}} \frac{\partial a^{(3)}}{\partial z^{(3)}}$ ，$\delta^{(2)}=\delta^{(3)} \Theta^{(2)} g^{\prime}\left(Z^{(2)}\right)$则得到公式(2)。令$\frac{\partial J}{\partial \Theta^{(1)}}=\Delta^{(1)}$得到公式(4)。</p><h4 id="梯度检验"><a href="#梯度检验" class="headerlink" title="梯度检验"></a>梯度检验</h4><p>目的：在反向传播的过程中，因为需要计算的参数很多，因此容易导致误差，使得最终的结果并非最优解。因此为了确定反向传播计算的梯度是否正确，需要用到梯度检验(<strong>gradient check</strong>)。</p><p>原理：通过计算$\frac{\partial}{\partial \Theta}J(\Theta)=\lim _{\varepsilon \rightarrow 0} \frac{J(\theta+\varepsilon)-J(\theta-\varepsilon)}{2 \varepsilon}$，估计出$J(\theta)$在$\theta$的值，和反向传播计算的梯度值$\Delta$进行对比。具体来说，对于某个特定的 $\theta$，我们计算出在 $\theta$-$\varepsilon $ 处和 $\theta$+$\varepsilon $ 的代价值（$\varepsilon $是一个非常小的值，通常选取 0.001），然后求两个代价的平均，用以估计在 $\theta$ 处的代价值。</p><p><img src="https://s2.ax1x.com/2019/04/09/A5HaS1.png" alt="A5HaS1.png"></p><p>具体做法：先将$\Theta_{(1)}$和$\Theta_{(2)}$展开成一个向量$\theta$，维度（10285，）。然后循环，对每个$\theta_{j}$求$\frac{\partial}{\partial \theta_{j}}J(\theta)$，以$\theta_{1}$为例，$\frac{\partial}{\partial \theta_{1}}=\frac{J\left(\theta_{1}+\varepsilon_{1}, \theta_{2}, \theta_{3} \dots \theta_{n}\right)-J\left(\theta_{1}-\varepsilon_{1}, \theta_{2}, \theta_{3} \ldots \theta_{n}\right)}{2 \varepsilon}$，注意这里虽然只有$\theta_{j}$每次都要把整个$J(\theta)$带进去，因此需要每次都复制整个$\theta$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_check</span><span class="params">(theta1,theta2,X,y,e)</span>:</span></span><br><span class="line">    theta_temp=serialize(theta1,theta2) <span class="comment"># (10285,)</span></span><br><span class="line">    numeric_grad=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(theta_temp)):</span><br><span class="line">        plus=copy.copy(theta_temp) <span class="comment"># 复制theta</span></span><br><span class="line">        minus=copy.copy(theta_temp) <span class="comment"># 复制theta</span></span><br><span class="line">        plus[i]+=e <span class="comment"># 只改变当前的一个值</span></span><br><span class="line">        minus[i]-=e <span class="comment"># 只改变当前的一个值</span></span><br><span class="line">        </span><br><span class="line">        grad_i=(cost_reg(plus,X,y,<span class="number">1</span>)-cost_reg(minus,X,y,<span class="number">1</span>))/(e*<span class="number">2</span>)</span><br><span class="line">        numeric_grad.append(grad_i)</span><br></pre></td></tr></table></figure><p>再和$\Theta_{(1)}$和$\Theta_{(2)}$比较求得准确度。</p><p>这里简单介绍一下数值梯度(<strong>numerical gradient</strong>)和解析梯度(<strong>analytic gradient</strong>)，数值梯度的优点是编程可以直接实现，不要求函数可微，缺点是运行速度非常慢，也就是上面中<code>numeric_grad</code>，且只能求出近似解；解析梯度能求出近似解，也是我们通常使用的方法，即<code>analytic_grad</code>。</p><p>得到数值梯度和解析梯度之后，要求他们的进行相似性度量(<strong>Similarity Measurement</strong>)，这里用标准化欧氏距离（存疑？）$diff=\frac{ | \text { numeric_grad }-\text {analytic_grad}\left|_{2}\right.}{ | \text { numeric_grad }\left|_{2}+\right| \text { analytic_grad }\left|_{2}\right.}$，当距离(diff)小于<code>10e-9</code>时为计算正确。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">reg_D1,reg_D2=regularized_gradient(theta_temp,X,y)</span><br><span class="line">analytic_grad=serialize(reg_D1,reg_D2)</span><br><span class="line">   </span><br><span class="line">   diff = np.linalg.norm(numeric_grad - analytic_grad) / np.linalg.norm(numeric_grad + analytic_grad)</span><br><span class="line"></span><br><span class="line">   print(<span class="string">'If your backpropagation implementation is correct,\nthe relative difference will be smaller than 10e-9 (assume epsilon=0.0001).\nRelative Difference:  &#123;&#125;\n'</span>.format(diff))</span><br></pre></td></tr></table></figure><p><code>np.linalg.norm()</code>：linalg=linear(线性)+algebra(代数)，norm()表示范数$^{[1]}$。</p><h4 id="优化参数"><a href="#优化参数" class="headerlink" title="优化参数"></a>优化参数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nn_trainning</span><span class="params">(X,y)</span>:</span></span><br><span class="line"></span><br><span class="line">    init_theta = random_init(<span class="number">10285</span>) <span class="comment">#随机初始化theta1和theta2</span></span><br><span class="line">    res = opt.minimize(</span><br><span class="line">        fun=cost_reg,</span><br><span class="line">        x0=init_theta,</span><br><span class="line">        args=(X, y, <span class="number">1</span>),</span><br><span class="line">        method=<span class="string">'TNC'</span>,</span><br><span class="line">        jac=regularized_gradient,</span><br><span class="line">        options=&#123;<span class="string">'maxiter'</span>: <span class="number">400</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h4 id="可视化隐藏层"><a href="#可视化隐藏层" class="headerlink" title="可视化隐藏层"></a>可视化隐藏层</h4><p>一种明白神经网络是如何学习的方法就是将隐藏层捕获的内容可视化，通俗来说就是输入一个x，激活这个隐藏层。在我们的这个训练样本中，$\theta_{1}$（25,401）有401个参数，去掉偏置单元，将剩下的400个参数reshape为(20,20)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_hidden</span><span class="params">(theta)</span>:</span></span><br><span class="line">    t1,_=deserialize(theta)</span><br><span class="line">    t1=t1[:,<span class="number">1</span>:]</span><br><span class="line">    fig,ax_array=plt.subplots(<span class="number">5</span>,<span class="number">5</span>,sharex=<span class="keyword">True</span>,sharey=<span class="keyword">True</span>,figsize=(<span class="number">6</span>,<span class="number">6</span>))</span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">            ax_array[r,c].matshow(t1[r*<span class="number">5</span>+c].reshape(<span class="number">20</span>,<span class="number">20</span>),cmap=<span class="string">'gray_r'</span>)</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><h4 id="计算精确度"><a href="#计算精确度" class="headerlink" title="计算精确度"></a>计算精确度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">accuracy</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    theta1, theta2 = deserialize(theta)</span><br><span class="line">    _, _, _, h = feed_forward(theta1, theta2, X)</span><br><span class="line">    y_pred = np.argmax(h, axis=<span class="number">1</span>) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    print(classification_report(y, y_pred))</span><br></pre></td></tr></table></figure><h4 id="主函数-1"><a href="#主函数-1" class="headerlink" title="主函数"></a>主函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    path = <span class="string">'ex4data1.mat'</span></span><br><span class="line">    X, raw_y = ff.load_mat(path)</span><br><span class="line">    X = np.insert(X, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br><span class="line">    y = ff.expand_y(raw_y)  <span class="comment"># y的一行表示一个样本</span></span><br><span class="line">    <span class="comment"># theta1, theta2 = ff.load_weight()</span></span><br><span class="line">    <span class="comment"># gradient_check(theta1,theta2,X,y,0.0001)</span></span><br><span class="line">    theta_unroll = nn_training(X, y)</span><br><span class="line">    accuracy(theta_unroll.x, X, raw_y)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://blog.csdn.net/hqh131360239/article/details/79061535" target="_blank" rel="noopener">np.linalg.norm(求范数)</a></p><p>[2] <a href="https://blog.csdn.net/Cowry5/article/details/80399350" target="_blank" rel="noopener">吴恩达机器学习作业Python实现(四)：神经网络(反向传播)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;正向传播&quot;&gt;&lt;a href=&quot;#正向传播&quot; class=&quot;headerlink&quot; title=&quot;正向传播&quot;&gt;&lt;/a&gt;正向传播&lt;/h2&gt;&lt;p&gt;和&lt;a href=&quot;https://nullblog.top/2019/04/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;机器学习|吴恩达机器学习之神经网络&lt;/a&gt;中的内容差不多，都是在给出$\Theta_{(1)}$和$\Theta_{(2)}$的情况下通过正向传播求个代价值或是验证一下准确率。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>subplots画图</title>
    <link href="http://yoursite.com/2019/04/07/subplots%E7%94%BB%E5%9B%BE/"/>
    <id>http://yoursite.com/2019/04/07/subplots画图/</id>
    <published>2019-04-07T10:32:59.000Z</published>
    <updated>2019-04-08T02:06:46.741Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>matplotlib是python领域中很常见的绘图模块</p></blockquote><p>几乎只在需要用到时查手册，这里记录一些比较常用的函数，有机会再来系统学习一下</p><a id="more"></a><p>以一段画图代码为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_data</span><span class="params">(X)</span>:</span></span><br><span class="line">    <span class="string">'''随机画100个数字'''</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># np.random.choice(arrange,size),返回ndarray</span></span><br><span class="line">    index=np.random.choice(range(<span class="number">5000</span>),<span class="number">100</span>) </span><br><span class="line">    images=X[index] <span class="comment"># 随机选择100个样本</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># ax_array为Axes对象</span></span><br><span class="line">    fig,ax_array=plt.subplots(<span class="number">10</span>,<span class="number">10</span>,sharex=<span class="keyword">True</span>,sharey=<span class="keyword">True</span>,figsize=(<span class="number">8</span>,<span class="number">8</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            <span class="comment"># matshow() 第一个参数为要显示的矩阵</span></span><br><span class="line">            <span class="comment">#Display an array as a matrix in a new figure window</span></span><br><span class="line">            ax_array[r,c].matshow(images[r*<span class="number">10</span>+c].reshape(<span class="number">20</span>,<span class="number">20</span>),cmap=<span class="string">'gray_r'</span>)</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>1.<code>matplotlib.pyplot.subplots()</code>：创建一个figure和一组subplots</p><p>参数：</p><ul><li>nrows，ncols：<code>axes</code>的数量，这里是10*10</li><li>sharex，sharey：共享所有<code>axes</code>X轴和y轴的属性，设置<code>True</code>开启</li></ul><p>返回值：</p><ul><li>figure</li><li>ax：一个或多个<code>axes</code>对象</li></ul><p><strong>*</strong>  <code>axes</code>和<code>subplot</code>的区别：简单来说，如果把<code>figure</code>看做是电脑桌面，那么<code>axes</code>就是可自由移动的图标，<code>subplot</code>则是不可自由移动的图标。</p><p>2.<code>matplotlib.pyplot.matshow()</code>：在窗口用矩阵显示一个数组</p><p>参数：</p><ul><li>array-like(M,N)：要显示的(M,N)<strong>矩阵</strong></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;matplotlib是python领域中很常见的绘图模块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;几乎只在需要用到时查手册，这里记录一些比较常用的函数，有机会再来系统学习一下&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="matplotlib" scheme="http://yoursite.com/tags/matplotlib/"/>
    
  </entry>
  
  <entry>
    <title>机器学习|吴恩达机器学习之神经网络</title>
    <link href="http://yoursite.com/2019/04/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>http://yoursite.com/2019/04/06/机器学习-吴恩达机器学习之神经网络/</id>
    <published>2019-04-06T07:43:14.000Z</published>
    <updated>2019-04-06T08:27:28.290Z</updated>
    
    <content type="html"><![CDATA[<h2 id="多类分类问题"><a href="#多类分类问题" class="headerlink" title="多类分类问题"></a>多类分类问题</h2><p>就是把多个类别细分为多个0-1类别来分析</p><p><img src="https://s2.ax1x.com/2019/04/06/AW3v7T.png" alt="AW3v7T.png"></p><a id="more"></a><h3 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h3><h4 id="导入与处理数据"><a href="#导入与处理数据" class="headerlink" title="导入与处理数据"></a>导入与处理数据</h4><p>1.导入模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line"><span class="keyword">from</span> scipy.optimize <span class="keyword">import</span> minimize</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Sigmoid</span><br></pre></td></tr></table></figure><p>2.导入数据</p><p>因为图像的灰度值是用<code>.mat</code>存储的，所以用<code>loadmat</code>来导入到<code>python</code>中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 5000个训练样本，每个样本20*20的灰度值，展开为400维向量。输出为0~9的数字</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_data</span><span class="params">(path)</span>:</span></span><br><span class="line">    data=loadmat(path)</span><br><span class="line">    X=data[<span class="string">'X'</span>]</span><br><span class="line">    y=data[<span class="string">'y'</span>]</span><br><span class="line">    <span class="keyword">return</span> X,y</span><br></pre></td></tr></table></figure><p>3.可以随机显示一张图片来观察</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_an_image</span><span class="params">(X,y)</span>:</span></span><br><span class="line">    pick_one=np.random.randint(<span class="number">0</span>,<span class="number">5000</span>)</span><br><span class="line">    image=X[pick_one,:]</span><br><span class="line">    fig,ax=plt.subplots(figsize=(<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">    ax.matshow(image.reshape(<span class="number">20</span>,<span class="number">20</span>),cmap=<span class="string">'gray_r'</span>)</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    plt.show()</span><br><span class="line">    print(<span class="string">'this should be &#123;&#125;'</span>.format(y[pick_one]))</span><br></pre></td></tr></table></figure><p>结果如图：</p><p><img src="https://s2.ax1x.com/2019/04/06/AWG3RJ.png" alt="AWG3RJ.png"></p><h4 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h4><p>正则化项逻辑回归，和之前的没区别</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost_reg</span><span class="params">(theta,X,y,lmd)</span>:</span></span><br><span class="line">    theta_reg=theta[<span class="number">1</span>:]</span><br><span class="line">    first=y*np.log(Sigmoid.sigmoid(X@theta))+(<span class="number">1</span>-y)*np.log(<span class="number">1</span>-Sigmoid.sigmoid(X@theta))</span><br><span class="line">    reg=(lmd/(<span class="number">2</span>*len(X)))*(theta_reg@theta_reg)<span class="comment"># 惩罚项不从第一项开始</span></span><br><span class="line">    <span class="keyword">return</span> -np.mean(first)+reg</span><br></pre></td></tr></table></figure><h4 id="梯度函数"><a href="#梯度函数" class="headerlink" title="梯度函数"></a>梯度函数</h4><p>和之前的没区别，只不过这里用了<code>np.concatenate()</code>来拼接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_reg</span><span class="params">(theta,X,y,lmd)</span>:</span></span><br><span class="line">    theta_reg=theta[<span class="number">1</span>:]</span><br><span class="line">    first=(<span class="number">1</span>/len(X))*(X.T@(Sigmoid.sigmoid(X@theta)-y))</span><br><span class="line">    reg=np.concatenate([np.array([<span class="number">0</span>]),(lmd/len(X))*theta_reg])</span><br><span class="line">    <span class="keyword">return</span> first+reg</span><br></pre></td></tr></table></figure><h4 id="one-vs-all"><a href="#one-vs-all" class="headerlink" title="one vs all"></a>one vs all</h4><p>每次循环都求出0~9中任一数字的$\theta$值（将该数字和其他数字二分类），最后拼接成一个矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_vs_all</span><span class="params">(X,y,lmd,K)</span>:</span></span><br><span class="line">    all_theta=np.zeros((K,X.shape[<span class="number">1</span>]))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,K+<span class="number">1</span>):</span><br><span class="line">        theta=np.zeros(X.shape[<span class="number">1</span>])</span><br><span class="line">        y_i=np.array([<span class="number">1</span> <span class="keyword">if</span> label==i <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> label <span class="keyword">in</span> y])</span><br><span class="line">    </span><br><span class="line">        ret=minimize(fun=cost_reg,x0=theta,args=(X,y_i,lmd),method=<span class="string">'TNC'</span>,</span><br><span class="line">                        jac=gradient_reg,options=&#123;<span class="string">'disp'</span>:<span class="keyword">True</span>&#125;)</span><br><span class="line">        </span><br><span class="line">        all_theta[i<span class="number">-1</span>,:]=ret.x</span><br><span class="line">   </span><br><span class="line">    <span class="keyword">return</span> all_theta</span><br></pre></td></tr></table></figure><h4 id="计算精确度"><a href="#计算精确度" class="headerlink" title="计算精确度"></a>计算精确度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">计算精确度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">返回值</span></span><br><span class="line"><span class="string">h_argmax是一个存放预测数字的一维ndarray</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict_all</span><span class="params">(X, all_theta)</span>:</span></span><br><span class="line">    h = Sigmoid.sigmoid(X @ all_theta.T)</span><br><span class="line">    <span class="comment"># 返回指定方向上的最大值的索引 axis=0:按列索引，axis=1：按行索引</span></span><br><span class="line">    h_argmax = np.argmax(h, axis=<span class="number">1</span>)</span><br><span class="line">    h_argmax = h_argmax + <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> h_argmax</span><br></pre></td></tr></table></figure><h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    X, y = load_data(<span class="string">'ex3data1.mat'</span>)</span><br><span class="line">    plot_an_image(X,y)</span><br><span class="line">    X = np.insert(X, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br><span class="line">    y = y.flatten()</span><br><span class="line">    all_theta = one_vs_all(X, y, <span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">    y_pred = predict_all(X, all_theta)</span><br><span class="line">    accuracy = np.mean(y_pred == y)  <span class="comment"># 精确度94.46%</span></span><br></pre></td></tr></table></figure><h2 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>模仿人类大脑的神经元：</p><p><img src="https://s2.ax1x.com/2019/04/06/AW01J0.md.png" alt="AW01J0.md.png"></p><p>进一步设计出神经网络：</p><p><img src="https://s2.ax1x.com/2019/04/06/AW0JQU.md.png" alt="AW0JQU.md.png"></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>这个实验是神经网络的正向传播过程，不涉及如何训练。</p><h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy.io <span class="keyword">import</span> loadmat</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> Sigmoid</span><br><span class="line"><span class="keyword">import</span> multiClassClassification <span class="keyword">as</span> mc</span><br></pre></td></tr></table></figure><h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><p>这里的权重已经给出，导入即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_weigth</span><span class="params">(path)</span>:</span></span><br><span class="line">    data=loadmat(path)</span><br><span class="line">    <span class="comment"># Theta1是输入层和隐藏层之间的参数；Theta2是隐藏层和输出层之间的参数</span></span><br><span class="line">    <span class="keyword">return</span> data[<span class="string">'Theta1'</span>],data[<span class="string">'Theta2'</span>]</span><br></pre></td></tr></table></figure><h4 id="main函数-1"><a href="#main函数-1" class="headerlink" title="main函数"></a>main函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    theta1, theta2 = load_weigth(<span class="string">'ex3weights.mat'</span>)</span><br><span class="line">    X, y = mc.load_data(<span class="string">'ex3data1.mat'</span>)</span><br><span class="line">    y = y.flatten()</span><br><span class="line">    X = np.insert(X, <span class="number">0</span>, values=np.ones(X.shape[<span class="number">0</span>]), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输入层到隐藏层</span></span><br><span class="line">    z2 = X @ theta1.T</span><br><span class="line">    z2 = np.insert(z2, <span class="number">0</span>, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 隐藏层到输出层</span></span><br><span class="line">    a2 = Sigmoid.sigmoid(z2)</span><br><span class="line">    </span><br><span class="line">    z3 = a2 @ theta2.T</span><br><span class="line">    a3 = Sigmoid.sigmoid(z3)</span><br><span class="line"></span><br><span class="line">    y_pred = np.argmax(a3, axis=<span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">    accurcy = np.mean(y_pred == y)  <span class="comment"># 精确度97.52%</span></span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://nullblog.top/2019/03/23/%E6%AD%A3%E5%90%91%E4%BC%A0%E6%92%AD%E7%9A%84%E5%90%91%E9%87%8F%E5%8C%96%E5%AE%9E%E7%8E%B0/#more" target="_blank" rel="noopener">正向传播的向量化实现</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;多类分类问题&quot;&gt;&lt;a href=&quot;#多类分类问题&quot; class=&quot;headerlink&quot; title=&quot;多类分类问题&quot;&gt;&lt;/a&gt;多类分类问题&lt;/h2&gt;&lt;p&gt;就是把多个类别细分为多个0-1类别来分析&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/04/06/AW3v7T.png&quot; alt=&quot;AW3v7T.png&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习|吴恩达机器学习之线性回归</title>
    <link href="http://yoursite.com/2019/04/06/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2019/04/06/机器学习-吴恩达机器学习之线性回归/</id>
    <published>2019-04-06T07:31:33.000Z</published>
    <updated>2019-04-06T07:31:33.892Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>对《机器学习》这门课程的回顾，系列文章的目的是希望能够把<strong>原理</strong>和<strong>代码</strong>实现统一起来，增进理解，所以对一些我认为简单的知识，可能会一笔带过。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这里对第一周的内容做一些简单的回顾：</p><p><img src="https://s2.ax1x.com/2019/03/29/A0dT2V.png" alt=""></p><a id="more"></a><h2 id="线性回归-单变量-one-variable"><a href="#线性回归-单变量-one-variable" class="headerlink" title="线性回归-单变量(one variable)"></a>线性回归-单变量(one variable)</h2><h3 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h3><h5 id="假设函数"><a href="#假设函数" class="headerlink" title="假设函数"></a>假设函数</h5><p>（1）公式：$h_{\theta}(x)=\theta_{0}+\theta_{1}x​$</p><p>（2）原理：输入一个单变量x，输出预测值</p><h5 id="代价函数"><a href="#代价函数" class="headerlink" title="代价函数"></a>代价函数</h5><p>（1）公式：$J(\theta_{0},\theta_{1})=\frac{1}{2m}\sum_{i=1}^{m}(h_{\theta}(x_{i})-y_{i})^{2}$，又称“平方误差函数”，这里的1/2是方便后面求导时约掉平方。</p><p>（2）原理：最小二乘法判断误差。</p><h5 id="梯度下降法"><a href="#梯度下降法" class="headerlink" title="梯度下降法"></a>梯度下降法</h5><p>（1）公式：</p><p><img src="https://s2.ax1x.com/2019/03/29/A0BCHe.png" alt=""></p><p>重复直到收敛。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>在实际代码中，数据都是用矩阵的方式来表示。</strong></p><p>1.导入几个常用库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment">#画图函数</span></span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">from</span> matplotlib.colors <span class="keyword">import</span> LogNorm</span><br></pre></td></tr></table></figure><h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><p>1.导入<code>csv</code>文件，用<code>DataFrame</code>结构存储。</p><p>（1）关于<code>csv</code>文件：简单来说就是纯文本，以行为一条记录，每条记录被分隔符分隔。<a href="https://baike.baidu.com/item/CSV/10739" target="_blank" rel="noopener">CSV文件</a></p><p>（2）pandas中的<code>DataFrame</code>：<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.html" target="_blank" rel="noopener">官方手册</a></p><p>（3）关于<code>.describe()</code>返回值中的分位数：<a href="https://nullblog.top/2019/03/12/%E6%B5%85%E8%B0%88%E5%88%86%E4%BD%8D%E6%95%B0/" target="_blank" rel="noopener">浅谈分为数</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''导入数据'''</span></span><br><span class="line">path = <span class="string">'Data\ex1data1.txt'</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">path:路径</span></span><br><span class="line"><span class="string">header:列名，等于None，是因为接下去列名会显示传递</span></span><br><span class="line"><span class="string">names:需要传递的列名</span></span><br><span class="line"><span class="string">返回值：</span></span><br><span class="line"><span class="string">DataFrame形式数据结构</span></span><br><span class="line"><span class="string">'''</span> </span><br><span class="line">data = pd.read_csv(</span><br><span class="line">    path, header=<span class="keyword">None</span>,</span><br><span class="line">    names=[<span class="string">'Population'</span>,</span><br><span class="line">           <span class="string">'Profit'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入数据以后可视化观察一下</span></span><br><span class="line">data.head() <span class="comment"># 查看记录，默认返回前5条</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看数据集的描述信息 </span></span><br><span class="line"><span class="comment"># count:样本个数  mean：均值  std:标准差  min:最小值  25%:四分之一位数  50%:中位数  75%:四分之# 三位数  max:最大值</span></span><br><span class="line">data.describe()</span><br></pre></td></tr></table></figure><p>2.对得到的数据进行加工，方便计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">从样本集中分离出X和y</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">data.insert(<span class="number">0</span>, <span class="string">'one'</span>, <span class="number">1</span>)<span class="comment"># 插入第1列：X0=1</span></span><br><span class="line"></span><br><span class="line">cols = data.shape[<span class="number">1</span>]  <span class="comment"># .shape返回一个元组，[0]为行数，[1]为列数</span></span><br><span class="line"><span class="comment"># 提取X，y的值</span></span><br><span class="line">X = data.iloc[:, <span class="number">0</span>:cols - <span class="number">1</span>]</span><br><span class="line">y = data.iloc[:, cols - <span class="number">1</span>:cols]</span><br></pre></td></tr></table></figure><p>初始化数据矩阵，这里转化成了<code>np.matrix</code>，但建议使用<code>np.ndarray</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">数据处理</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="comment"># 将dataframe结构转化成np的matrix</span></span><br><span class="line"><span class="comment"># 当Theta取0时计算平均误差</span></span><br><span class="line">X = np.matrix(X.values)</span><br><span class="line">y = np.matrix(y.values)</span><br><span class="line">theta = np.matrix([<span class="number">0</span>, <span class="number">0</span>])</span><br><span class="line"><span class="comment"># 初始化学习速率和迭代次数</span></span><br><span class="line">alpha = <span class="number">0.01</span></span><br><span class="line">epoch = <span class="number">1000</span></span><br></pre></td></tr></table></figure><h4 id="计算函数"><a href="#计算函数" class="headerlink" title="计算函数"></a>计算函数</h4><p>1.代价函数</p><p>公式：$J(\theta_{0},\theta_{1})=\frac{1}{2m}\sum_{i=1}^{m}(h_{\theta}(x_{i})-y_{i})^{2}$，其中主要矩阵化：假设函数$h_{\theta}(x_{i})=\theta^{T}X$和$y_{(i)}$</p><p>（1）向量化：计算过程中注意矩阵乘法或是向量乘法的<strong>合法性</strong>。</p><p>（2）数据可以用<code>np.matrix</code>存储，但更建议使用<code>np.ndarray</code></p><p>（3）<code>np.matrix</code>和<code>np.ndarray</code>在乘法上有所区别:<a href="https://nullblog.top/2019/03/19/Numpy%E4%B8%AD%E7%9A%84%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/" target="_blank" rel="noopener">Numpy中的矩阵乘法</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">函数名：</span></span><br><span class="line"><span class="string">代价函数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">X：矩阵 </span></span><br><span class="line"><span class="string">-可用.shape查看维度(97,2)</span></span><br><span class="line"><span class="string">y：向量，用numpy.matrix的结构存储</span></span><br><span class="line"><span class="string">    -可用.shape查看维度(97,1)</span></span><br><span class="line"><span class="string">theta:向量，np.matrix的结构存储</span></span><br><span class="line"><span class="string">-维度(1,2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">返回值：</span></span><br><span class="line"><span class="string">代价函数值</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">costFunciton</span><span class="params">(X, y, theta)</span>:</span></span><br><span class="line">    inner = np.power(((X * theta.T) - y), <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">return</span> np.sum(inner) / (<span class="number">2</span> * len(X))</span><br></pre></td></tr></table></figure><p>2.批量梯度下降：</p><p>（1）公式：</p><p><img src="https://s2.ax1x.com/2019/03/29/A0BCHe.png" alt=""></p><p>（2）作用：通过迭代的方式来寻找代价函数最小时的参数（$\theta_{j}$）</p><p>（3）学习速率：如果过大，会导致无法到达代价值最小点（函数发散或震荡）；如果过小，则会使得迭代时间过长。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">函数名：</span></span><br><span class="line"><span class="string">梯度下降法</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">X:矩阵</span></span><br><span class="line"><span class="string">y:向量</span></span><br><span class="line"><span class="string">theta:向量</span></span><br><span class="line"><span class="string">alpha:学习速率</span></span><br><span class="line"><span class="string">epoch：迭代次数</span></span><br><span class="line"><span class="string">返回值：</span></span><br><span class="line"><span class="string">theta:最后得到的两个参数theta_0,theta_1</span></span><br><span class="line"><span class="string">cost:最后得到的误差</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradientDescent</span><span class="params">(X, y, theta, alpha, epoch)</span>:</span></span><br><span class="line"></span><br><span class="line">    temp = np.matrix(np.zeros(theta.shape))</span><br><span class="line"></span><br><span class="line">    cost = np.zeros(epoch)  <span class="comment"># epoch为迭代次数</span></span><br><span class="line">    m = X.shape[<span class="number">0</span>]  <span class="comment"># 样本数量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(epoch):</span><br><span class="line">        temp = theta - (alpha / m) * (X.dot(theta.T) - y).T.dot(X)</span><br><span class="line">        theta = temp</span><br><span class="line">        <span class="comment"># 记录一下每次更新后的误差</span></span><br><span class="line">        cost[i] = costFunciton(X, y, theta)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> theta, cost</span><br></pre></td></tr></table></figure><p>2*.正规方程法(Normal Equation)</p><p>（1）同样也可以用于寻找代价函数最小时候的参数取值，与梯度下降法(Gradient Descent)比较</p><p><img src="https://s2.ax1x.com/2019/04/02/Aydhpd.md.jpg" alt="Aydhpd.md.jpg"></p><p>（2）公式：$\theta=(X^{T}X)^{-1}X^{T}y$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''特征方程'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">norEquation</span><span class="params">(X,y)</span>:</span></span><br><span class="line">    theta=np.linalg.inv(X.T.dot(X)).dot(X.T).dot(y)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> theta</span><br></pre></td></tr></table></figure><h4 id="画图函数"><a href="#画图函数" class="headerlink" title="画图函数"></a>画图函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(</span><br><span class="line">    data.Population.min(), data.Population.max(),</span><br><span class="line">    <span class="number">100</span>)  <span class="comment"># 横坐标:linspace(start,end, num)从start开始到end结束，平均分成num份，返回一个数组</span></span><br><span class="line">f = final_theta[<span class="number">0</span>, <span class="number">0</span>] + (final_theta[<span class="number">0</span>, <span class="number">1</span>] * x)  <span class="comment"># 假设函数</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''函数和散点图'''</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">plt.plot(x, f, <span class="string">'r'</span>, label=<span class="string">'Prediction'</span>)</span><br><span class="line">plt.scatter(data[<span class="string">'Population'</span>], data.Profit, label=<span class="string">'Training Data'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'Population'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'Profit'</span>)</span><br><span class="line">plt.title(<span class="string">'Predicted Profit vs. Population Size'</span>)</span><br></pre></td></tr></table></figure><p>结果图：</p><p><img src="https://s2.ax1x.com/2019/04/02/AydTnP.md.png" alt="AydTnP.md.png"></p><p>可以看出拟合效果还可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">绘制代价函数与迭代次数的图像</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">plt.plot(np.arange(epoch), cost, <span class="string">'r'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'iteration'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'cost'</span>)</span><br></pre></td></tr></table></figure><p>结果图：</p><p><img src="https://s2.ax1x.com/2019/04/02/AydqAS.md.png" alt="AydqAS.md.png"></p><p>随着迭代次数的增加，代价函数值单调递减。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">绘制代价函数3D图像</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">fig = plt.figure(figsize=(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">ax = Axes3D(fig)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制网格</span></span><br><span class="line"><span class="comment"># X,Y value</span></span><br><span class="line">theta0 = np.linspace(<span class="number">-10</span>, <span class="number">10</span>, <span class="number">100</span>)  <span class="comment"># 网格theta0范围</span></span><br><span class="line">theta1 = np.linspace(<span class="number">-1</span>, <span class="number">4</span>, <span class="number">100</span>)  <span class="comment"># 网格theta1范围</span></span><br><span class="line">x1, y1 = np.meshgrid(theta0, theta1)  <span class="comment"># 画网格</span></span><br><span class="line"><span class="comment"># height value</span></span><br><span class="line">z = np.zeros(x1.shape)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, theta0.size):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, theta1.size):</span><br><span class="line">        t = np.matrix([theta0[i], theta1[j]])</span><br><span class="line">        z[i][j] = costFunciton(X, y, t)</span><br><span class="line"><span class="comment"># 由循环可以看出，这里是先取x=-10时，y的所有取值，然后计算代价函数传入z的第一行</span></span><br><span class="line"><span class="comment"># 因此在绘图过程中，需要把行和列转置过来</span></span><br><span class="line">z = z.T</span><br><span class="line">ax.set_xlabel(<span class="string">r'$\theta_0$'</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">r'$\theta_1$'</span>)</span><br><span class="line"><span class="comment"># 绘制函数图像</span></span><br><span class="line">ax.plot_surface(x1, y1, z, rstride=<span class="number">1</span>, cstride=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>结果图：</p><p><img src="https://s2.ax1x.com/2019/04/02/AydLtg.md.png" alt="AydLtg.md.png"></p><p>关于3D图中的<a href="https://nullblog.top/2019/03/16/Numpy%E4%B8%AD%E7%9A%84Meshgrid/" target="_blank" rel="noopener">Numpy中的Meshgrid</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">绘制等高线图</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">lvls = np.logspace(<span class="number">-2</span>, <span class="number">3</span>, <span class="number">20</span>)</span><br><span class="line">plt.contour(x1, y1, z, levels=lvls, norm=LogNorm())  <span class="comment"># 画出等高线</span></span><br><span class="line">plt.plot(final_theta[<span class="number">0</span>, <span class="number">0</span>], final_theta[<span class="number">0</span>, <span class="number">1</span>], <span class="string">'r'</span>, marker=<span class="string">'x'</span>)  <span class="comment"># 标出代价函数最小值点</span></span><br></pre></td></tr></table></figure><p>结果图：</p><p><img src="https://s2.ax1x.com/2019/04/02/AydOhQ.md.png" alt="AydOhQ.md.png"></p><h2 id="线性回归-多变量-multiple-variables"><a href="#线性回归-多变量-multiple-variables" class="headerlink" title="线性回归-多变量(multiple variables)"></a>线性回归-多变量(multiple variables)</h2><h3 id="特征缩放-Feature-scaling"><a href="#特征缩放-Feature-scaling" class="headerlink" title="特征缩放(Feature scaling)"></a>特征缩放(Feature scaling)</h3><p>也叫均值归一化</p><p>（1）公式：$x=\frac{x-\mu}{s_{1}}$，其中$\mu$为$x$的均值，$s_{1}$为$x$的最大值减去最小值，或者使用标准差。</p><p>（2）作用：在多个特征值情况下，如果某个特征值$x_{i}$的取值范围和另一个特征值$x_{j}$的取值范围相差太大，会减慢梯度下降的速度，因此需要用特征缩放，将不同特征值的取值限定在差不多的范围内。</p><p>e.g. $x_{1}$为房子的面积，取值范围0~2000；$x_{2}$为卧室的数量，取值0-5；那么对二者使用特征缩放，可得：</p><p><img src="https://s2.ax1x.com/2019/03/31/ADOqIS.md.png" alt="ADOqIS.md.png"></p><p>（3）代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">data = (data - data.mean()) / data.std()  </span><br><span class="line"><span class="comment"># 除数可以用标准差也可以用max-min，因为pandas方便，所以使用标准差</span></span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1] <a href="https://blog.csdn.net/sdu_hao/article/details/82973212" target="_blank" rel="noopener">机器学习 | 吴恩达机器学习第一周学习笔记</a></p><p>[2] <a href="https://blog.csdn.net/sdu_hao/article/details/83932480" target="_blank" rel="noopener">机器学习 | 吴恩达机器学习第二周编程作业(Python版）</a></p><p>[3] <a href="https://blog.csdn.net/Cowry5/article/details/80174130" target="_blank" rel="noopener">吴恩达机器学习作业Python实现(一)：线性回归</a></p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p><a href="https://github.com/scp-1024/Coursera-ML-Ng/tree/master/Exercise%201-Linear%20Regression" target="_blank" rel="noopener">scp-1024/Coursera-ML-Ng</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对《机器学习》这门课程的回顾，系列文章的目的是希望能够把&lt;strong&gt;原理&lt;/strong&gt;和&lt;strong&gt;代码&lt;/strong&gt;实现统一起来，增进理解，所以对一些我认为简单的知识，可能会一笔带过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这里对第一周的内容做一些简单的回顾：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/03/29/A0dT2V.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>机器学习|吴恩达机器学习之逻辑回归</title>
    <link href="http://yoursite.com/2019/04/03/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E5%90%B4%E6%81%A9%E8%BE%BE%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    <id>http://yoursite.com/2019/04/03/机器学习-吴恩达机器学习之逻辑回归/</id>
    <published>2019-04-03T04:27:42.000Z</published>
    <updated>2019-04-13T05:44:50.048Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>一个名为回归确用于解决分类的算法，吴恩达coursera第三周</p></blockquote><a id="more"></a><h2 id="逻辑回归-Logic-Regression"><a href="#逻辑回归-Logic-Regression" class="headerlink" title="逻辑回归(Logic Regression)"></a>逻辑回归(Logic Regression)</h2><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><p>（1）常规读取数据的方法，值得注意的是<code>X = data.iloc[:, :-1].values</code>中<code>.values</code>作用是将<code>DataFrame</code>转化为<code>ndarray</code>。根据手册，更推荐使用<code>.to_numpy()</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">'ex2data1.txt'</span></span><br><span class="line">data = pd.read_csv(path, names=(<span class="string">'exam1'</span>, <span class="string">'exam2'</span>, <span class="string">'admitted'</span>))</span><br><span class="line">data_copy = pd.read_csv(path, names=(<span class="string">'exam1'</span>, <span class="string">'exam2'</span>, <span class="string">'admitted'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进一步准备数据，对结构初始化</span></span><br><span class="line">data.insert(<span class="number">0</span>, <span class="string">'One'</span>, <span class="number">1</span>)</span><br><span class="line">X = data.iloc[:, :<span class="number">-1</span>].values </span><br><span class="line">y = data.iloc[:, <span class="number">-1</span>].values</span><br><span class="line">theta = np.zeros(</span><br><span class="line">    X.shape[<span class="number">1</span>])  <span class="comment"># 注意这里theta创建的是一维的数组，对于ndarray一定要注意一维时它的shape（和matrix有很大区别）</span></span><br></pre></td></tr></table></figure><h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">数据可视化</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    cols = data.shape[<span class="number">1</span>]</span><br><span class="line">    feature = data.iloc[:, <span class="number">0</span>:cols - <span class="number">1</span>]</span><br><span class="line">    label = data.iloc[:, cols - <span class="number">1</span>]</span><br><span class="line">    <span class="comment"># iloc 根据列的位置索引来切片</span></span><br><span class="line">    postive = feature[label == <span class="number">1</span>]</span><br><span class="line">    negtive = feature[label == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># plt.figure(figsize=(8, 5))</span></span><br><span class="line">    plt.scatter(postive.iloc[:, <span class="number">0</span>], postive.iloc[:, <span class="number">1</span>])</span><br><span class="line">    plt.scatter(negtive.iloc[:, <span class="number">0</span>], negtive.iloc[:, <span class="number">1</span>], c=<span class="string">'r'</span>, marker=<span class="string">'x'</span>)</span><br><span class="line">    plt.legend([<span class="string">'Admitted'</span>, <span class="string">'Not admitted'</span>], loc=<span class="number">1</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Exam1 score'</span>)</span><br><span class="line">    plt.ylabel(<span class="string">'Exam2 score'</span>)</span><br></pre></td></tr></table></figure><h4 id="假设函数"><a href="#假设函数" class="headerlink" title="假设函数"></a>假设函数</h4><h5 id="假设函数："><a href="#假设函数：" class="headerlink" title="假设函数："></a>假设函数：</h5><p>（1）公式：$h_{\theta}(x)=\frac{1}{1+e^{-\theta^{T}x}}$，又名Sigmoid function，函数图像如下图所示，从图中可以看出$h_{\theta}$的取值范围0~1</p><p><img src="https://s2.ax1x.com/2019/04/03/Ac02QJ.png" alt=""></p><p>（2）$h_{\theta}$的含义是：<strong>特征x的情况下，y=1的概率</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sigmoid</span><span class="params">(z)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> / (<span class="number">1</span> + np.exp(-z))</span><br></pre></td></tr></table></figure><h4 id="代价函数："><a href="#代价函数：" class="headerlink" title="代价函数："></a>代价函数：</h4><p>如果这时再使用线性回归的$J(\theta_{0},\theta_{1})=\frac{1}{2m}\sum_{i=1}^{m}(h_{\theta}(x_{i})-y_{i})^{2}$将会导致函数图像不光滑。这样使用最小值法时容易导致无法找到全局最优解。因此需要使用新的代价函数。</p><p><img src="https://s2.ax1x.com/2019/04/03/AcBilQ.png" alt="AcBilQ.png"></p><p>（1）公式：<img src="https://s2.ax1x.com/2019/04/03/Ac0jeI.png" alt="Ac0jeI.png"></p><p>具体解释如下：</p><p><img src="https://s2.ax1x.com/2019/04/03/AcBVwq.md.png" alt="AcBVwq.md.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">cost function可以用矩阵实现也可以用ndarray实现，更建议使用后者</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    first = (-y) * np.log(Sigmoid.sigmoid(X @ theta))  <span class="comment"># 这里*号是对应位置相乘而不是矩阵运算</span></span><br><span class="line">    second = (<span class="number">1</span> - y) * np.log(<span class="number">1</span> - Sigmoid.sigmoid(X @ theta))</span><br><span class="line">    <span class="keyword">return</span> np.mean(first - second)</span><br></pre></td></tr></table></figure><h4 id="高级优化法："><a href="#高级优化法：" class="headerlink" title="高级优化法："></a>高级优化法：</h4><p>除了梯度下降法之外，还有其他几种优化方法，比起gradient descent，这些方法更适合处理大型数据且不需要你设置学习速率。</p><p><img src="https://s2.ax1x.com/2019/04/03/AcBl6J.md.png" alt="AcBl6J.md.png"></p><p>这些方法的具体原理非常复杂，但是，python的模块往往是非常强大的，因此往往只需要你计算一下到导数项即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient</span><span class="params">(theta, X, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> / len(X)) * (X.T @ (Sigmoid.sigmoid(X @ theta) - y))</span><br></pre></td></tr></table></figure><p>再使用<code>import scipy.optimize as opt</code>中的<code>.fmin_tnc</code>来迭代,得到最终的$\theta$值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里不使用梯度下降法，换成其他优化算法来迭代</span></span><br><span class="line">result = opt.fmin_tnc(func=cost, x0=theta, fprime=gradient, args=(X, y))</span><br><span class="line">final_theta = result[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><h4 id="检测准确率"><a href="#检测准确率" class="headerlink" title="检测准确率"></a>检测准确率</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">预测标签</span></span><br><span class="line"><span class="string">参数：</span></span><br><span class="line"><span class="string">-参数：theta</span></span><br><span class="line"><span class="string">-样本：X</span></span><br><span class="line"><span class="string">返回值：</span></span><br><span class="line"><span class="string">-预测标签</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">predict</span><span class="params">(theta, X)</span>:</span></span><br><span class="line">    probability = Sigmoid.sigmoid(X @ theta)</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span> <span class="keyword">if</span> x &gt;= <span class="number">0.5</span> <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> x <span class="keyword">in</span> probability]</span><br></pre></td></tr></table></figure><p>将得到的预测标签同数据原有的标签进行比对，得到准确率</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">predictions = predict(final_theta, X)</span><br><span class="line">correct = [<span class="number">1</span> <span class="keyword">if</span> a == b <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">for</span> (a, b) <span class="keyword">in</span> zip(predictions, y)]</span><br><span class="line">accurcy = np.sum(correct) / len(X)  <span class="comment"># 准确率89%</span></span><br></pre></td></tr></table></figure><p>也可以自定义一个样本预测一发</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输入一个数据进行预测</span></span><br><span class="line">test = np.array([<span class="number">1</span>, <span class="number">45</span>, <span class="number">85</span>]).reshape(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">predict_result = predict(final_theta, test)  <span class="comment"># 预测值y=1，概率为0.776</span></span><br></pre></td></tr></table></figure><h4 id="决策边界"><a href="#决策边界" class="headerlink" title="决策边界"></a>决策边界</h4><p>$h_{\theta}=0.5$时的直线，由假设函数图像可以看出，当$h_{\theta}=0.5$时，$z=\theta^{T}x=0$，这里图中是以$x2$作为纵坐标。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 决策边界</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_decision_boundary</span><span class="params">(theta, X)</span>:</span></span><br><span class="line">    plot_x = np.linspace(<span class="number">20</span>, <span class="number">110</span>)</span><br><span class="line">    plot_y = -(theta[<span class="number">0</span>] + plot_x * theta[<span class="number">1</span>]) / theta[<span class="number">2</span>]</span><br><span class="line">    plt.plot(plot_x, plot_y, c=<span class="string">'y'</span>)</span><br></pre></td></tr></table></figure><h4 id="画图函数"><a href="#画图函数" class="headerlink" title="画图函数"></a>画图函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">5</span>))</span><br><span class="line">plot_data(data_copy)</span><br><span class="line">plot_decision_boundary(final_theta, X)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>结果图为：</p><p><img src="https://s2.ax1x.com/2019/04/03/AcBvjJ.md.png" alt="AcBvjJ.md.png"></p><h2 id="带正则化项的逻辑回归函数"><a href="#带正则化项的逻辑回归函数" class="headerlink" title="带正则化项的逻辑回归函数"></a>带正则化项的逻辑回归函数</h2><h4 id="读入数据："><a href="#读入数据：" class="headerlink" title="读入数据："></a>读入数据：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">'ex2data2.txt'</span></span><br><span class="line">data = pd.read_csv(</span><br><span class="line">    path, names=(<span class="string">'Microchip Test1'</span>, <span class="string">'Microchip Test2'</span>, <span class="string">'Accept'</span>))</span><br><span class="line">x1 = data.iloc[:, <span class="number">0</span>].values</span><br><span class="line">x2 = data.iloc[:, <span class="number">1</span>].values</span><br></pre></td></tr></table></figure><h4 id="可视化数据"><a href="#可视化数据" class="headerlink" title="可视化数据"></a>可视化数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_data</span><span class="params">(data)</span>:</span></span><br><span class="line">    feature = data.iloc[:, <span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">    label = data.iloc[:, <span class="number">2</span>]</span><br><span class="line">    positive = feature[label == <span class="number">1</span>]</span><br><span class="line">    negative = feature[label == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    plt.scatter(positive.iloc[:, <span class="number">0</span>].values, positive.iloc[:, <span class="number">1</span>].values)</span><br><span class="line">    plt.scatter(</span><br><span class="line">        negative.iloc[:, <span class="number">0</span>].values,</span><br><span class="line">        negative.iloc[:, <span class="number">1</span>].values,</span><br><span class="line">        c=<span class="string">'r'</span>,</span><br><span class="line">        marker=<span class="string">'x'</span>)</span><br></pre></td></tr></table></figure><h4 id="特征映射"><a href="#特征映射" class="headerlink" title="特征映射"></a>特征映射</h4><p>由可视化数据可知，如果单独用两个特征，是无法表示出决策边界的（欠拟合underfit）。因此需要映射多个特征。</p><p><img src="https://s2.ax1x.com/2019/04/03/AcDVjH.png" alt="AcDVjH.png"></p><p>这里将$x1$和$x2$映射为6个特征值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">map_feature</span><span class="params">(x1, x2)</span>:</span></span><br><span class="line">    degree = <span class="number">6</span></span><br><span class="line"></span><br><span class="line">    x1 = x1.reshape((x1.size, <span class="number">1</span>))  <span class="comment"># ndarray.size：数组中元素的个数</span></span><br><span class="line">    x2 = x2.reshape((x2.size, <span class="number">1</span>))</span><br><span class="line">    result = np.ones(x1.shape[<span class="number">0</span>])  <span class="comment"># 初始化一个值为1的数组(列向量)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, degree + <span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i + <span class="number">1</span>):</span><br><span class="line">            result = np.c_[result, (x1**(i - j) * (x2**j))]  <span class="comment"># np.c_：列拼接</span></span><br><span class="line">    <span class="keyword">return</span> result  <span class="comment"># 返回值即为特征值X</span></span><br></pre></td></tr></table></figure><p>但这种映射可能导致过拟合（overfit），泛化能力差，因此还需要正则化（regularization）。</p><h4 id="正则化"><a href="#正则化" class="headerlink" title="*正则化"></a>*正则化</h4><p>（1）原理：</p><p>因为过拟合是由于特征项过多引起的，减少特征的数量固然可以，还有一种方法就是正则化：<strong>减小$\theta_{j}$的值。</strong></p><p><img src="https://s2.ax1x.com/2019/04/03/AcDRV1.md.png" alt="AcDRV1.md.png"></p><p>由图中可以看出，线性回归算法中添加两个正则化项——也叫惩罚项，1000$\theta_{3}$和1000$\theta_{4}$。上图可以看出，在利用优化算法求解参数时，要想让代价函数值变小，会使得$\theta_{3}$和$\theta_{4}$变得非常小，也就导致了$\theta_{3}x^{3}$和$\theta_{4}x^{4}$非常小，那么图中右边的假设函数就近似与左边的函数了。</p><p>实际操作中，我们很多时候并不知道究竟应该惩罚哪一项，所以实际上除了$\theta_{0}​$（全是1），所有项都会惩罚。</p><p>回到逻辑回归算法上也是一样的</p><p>（2）公式：</p><p><img src="https://s2.ax1x.com/2019/04/03/AcD4PK.md.png" alt="AcD4PK.md.png"></p><p>对于线性回归算法也类似：</p><p><img src="https://s2.ax1x.com/2019/04/03/AcD7KH.png" alt="AcD7KH.png"></p><h4 id="代价函数：-1"><a href="#代价函数：-1" class="headerlink" title="代价函数："></a>代价函数：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cost_reg</span><span class="params">(theta,X, y, lmd)</span>:</span></span><br><span class="line">    <span class="comment"># 不惩罚第一项</span></span><br><span class="line">    _theta = theta[<span class="number">1</span>:]</span><br><span class="line">    reg = (lmd / (<span class="number">2</span> * len(X))) * (_theta @ _theta)</span><br><span class="line"></span><br><span class="line">    first = (y) * np.log(Sigmoid.sigmoid(X @ theta))</span><br><span class="line">    second = (<span class="number">1</span> - y) * np.log(<span class="number">1</span> - Sigmoid.sigmoid(X @ theta))</span><br><span class="line">    final = -np.mean(first + second)</span><br><span class="line">    <span class="keyword">return</span> final + reg</span><br></pre></td></tr></table></figure><h4 id="梯度函数"><a href="#梯度函数" class="headerlink" title="梯度函数"></a>梯度函数</h4><p>（1）公式：<img src="https://s2.ax1x.com/2019/04/06/AWJzAf.md.png" alt="AWJzAf.md.png"></p><p>（2）向量化：$\theta_{j}:=\theta-\alpha[\frac{1}{m} X^{T} (g(X^{T}\theta)-y)+\frac{\lambda}{m}\theta_{j}]$</p><p>代码只需要计算蓝色括号中的内容，然后用<strong>优化算法</strong>迭代：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gradient_reg</span><span class="params">(theta,X, y, lmd)</span>:</span></span><br><span class="line">    <span class="comment"># 因为不惩罚第一项，所以要分开计算</span></span><br><span class="line">    grad = (<span class="number">1</span> / len(X)) * (X.T @ (Sigmoid.sigmoid(X @ theta) - y))</span><br><span class="line">    grad[<span class="number">1</span>:] += (lmd / len(X)) * theta[<span class="number">1</span>:]</span><br><span class="line">    <span class="keyword">return</span> grad</span><br></pre></td></tr></table></figure><h4 id="优化算法："><a href="#优化算法：" class="headerlink" title="优化算法："></a>优化算法：</h4><p>用于迭代计算$\theta_{j}$值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">result = opt.fmin_tnc(</span><br><span class="line">func=cost_reg,</span><br><span class="line">x0=theta,</span><br><span class="line">fprime=gradient_reg,</span><br><span class="line">args=(X, y, <span class="number">1</span>),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="画出决策边界"><a href="#画出决策边界" class="headerlink" title="画出决策边界"></a>画出决策边界</h4><p>不是代入假设函数来画！！在逻辑回归中假设函数时Sigmoid function，用于计算概率的！！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_decision_boundary</span><span class="params">(theta)</span>:</span></span><br><span class="line">    x=np.linspace(<span class="number">-1</span>,<span class="number">1.5</span>,<span class="number">50</span>)</span><br><span class="line">    plot_x,plot_y=np.meshgrid(x,x) <span class="comment"># 先画网格</span></span><br><span class="line"></span><br><span class="line">    z=map_feature(plot_x,plot_y)  </span><br><span class="line">    z=z@theta <span class="comment"># 画出边界</span></span><br><span class="line">    z=z.reshape(plot_x.shape)</span><br><span class="line">    plt.contour(plot_x,plot_y,z,<span class="number">0</span>,colors=<span class="string">'yellow'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一个名为回归确用于解决分类的算法，吴恩达coursera第三周&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>信息熵</title>
    <link href="http://yoursite.com/2019/03/29/%E4%BF%A1%E6%81%AF%E7%86%B5/"/>
    <id>http://yoursite.com/2019/03/29/信息熵/</id>
    <published>2019-03-29T02:53:40.000Z</published>
    <updated>2019-03-29T02:53:40.260Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们在生活中常常听到“这句话信息量好大。”、“这都是废话，没什么信息量。“，而我们却很少思考，这里的信息量究竟是什么意思？是否可以给出精确定义，甚至，量化它呢？</p></blockquote><p><img src="https://s2.ax1x.com/2019/03/26/ANfKbT.png" alt=""></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>1984年香农提出了”信息熵“的概念，解决了这个问题。</p><h2 id="信息中的熵"><a href="#信息中的熵" class="headerlink" title="信息中的熵"></a>信息中的熵</h2><blockquote><p>因为熵不只在信息，还在物理等其他领域有定义，虽然他们本质一样，但表达上和所研究的问题上略有差异，这里特作说明。</p></blockquote><p>可以这么理解：当一件事情（宏观态）具有多种情况时，对于观察者而言，其具体情况（微观态）的<strong>不确定度</strong>，称为熵。</p><p>显然这个定义看上去肯定是懵逼的，没事，用一个例子来解释。</p><p>假设我们在做一道单项选择题，这道选择题的答案具有4个选项。那么对你这个观察者而言，这个选择题正确答案的可能选择情况（四种选择情况：选A、选B、选C、选D）就是宏观态，而其中的每一个选择情况就被称为微观态。我们目前并不能确定谁是正确答案，所以其微观态就具有不确定性。那么此时此刻，”选择正确选项”这件事情对你而言，熵为2bit。</p><p>（1）、而正在你陷入迷茫之际，你的好基友小明来到了你的身边，悄悄地对你说：”有50%可能性选C。“</p><p>这条消息中含有的<strong>信息量</strong>，帮助你调整了每个微观态的概率：从等概率（A：25%，B：25%，C：25%，D：25%）调整为（A：16.6%，B：16.6%，C：50%，D：16.6%），而这条消息中含有的信息量为0.21bit，所以才“使用”了这条消息之后，“选出正确选项”这件事情的熵为$2-0.21=1.79bit$</p><p>（2）、这时候，你突然想起来可以直接看参考答案啊，于是你打开了书的最后一页发现——这题的正确答案选C。同样，这条消息含有的信息量同样也帮你调整了概率，这次更直接的把C的概率改为了100%。那么这条消息的信息量为2bit，因为它帮助你完全消除了“选出正确选项”这件事情的不确定性。</p><p>从上面的例子中可以发现，信息量的作用，就是用来消除熵。</p><p>到这里，你应该对熵的概念有了大体的理解，但还有一个问题，就是信息量是如何计算的？</p><h2 id="信息量是如何计算的"><a href="#信息量是如何计算的" class="headerlink" title="信息量是如何计算的"></a>信息量是如何计算的</h2><p>我们都知道，在定义重量的单位时，我们先是选择了一个<strong>参照物</strong>，比如一块砖头，我们把这块砖头的重量定义为1千克，剩下的所有物体的重量都可以利用这块砖头来表示，比如把我和一堆砖头放在天平上，当达到水平状态时，只要数出砖头个数——65个，那么就可以知道我的重量是65kg。</p><p>基于同样的道理，我们先找一个参照物事件——扔硬币！它只有2种等概率情况，即50%正面50%反面（微观态）。它的熵（不确定性）我们记为1bit，那么再回顾一下你的选择题，在刚开始时，它的等概率情况有4种，所以它的熵就是2bit。</p><p>同样推断，如果一件事情的等概率情况有8种，那么它的熵就是4bit…那是不可能的。</p><p>你先仔细想想，什么事情具有8种等概率情况？对的，扔3枚硬币，所以熵是3bit而不是4bit。原因是，扔硬币结果的个数和硬币之间是<strong>指数关系</strong>而不是线性关系。</p><p>所以我们可以总结：<strong>在各个微观态之间是等概率的情况下，把宏观态的熵记为n，微观态的个数记为m，就可以得到 $n=log_{2}m​$</strong></p><p>但问题又来了，如果各个微观态之间不是等概率的情况呢？</p><p>显然无法直接用上面的公式，这里回到“选择题事件”的（1）中，当我们得知了小明给出的消息之后，熵的bit数为：$n=p_{A}<em>log_{2}(1/p_{A})+p_{B}</em>log_{2}(1/p_{B})+p_{C}<em>log_{2}(1/p_{C})+p_{D}</em>log_{2}(1/p_{D})$ </p><p>其中$p$为每个选项的概率。这里对数中概率取倒数的原因：概率的倒数等于其发生在等概率情况的个数。</p><p>计算后熵 $n=1.79bit$ ，则小明的消息中的信息量就是0.21bit 。</p><p><strong>以上的内容均来自 <a href="https://space.bilibili.com/344849038/video" target="_blank" rel="noopener">B站—YJango</a>中10~11期的内容。</strong></p><h2 id="计算熵的公式"><a href="#计算熵的公式" class="headerlink" title="计算熵的公式"></a>计算熵的公式</h2><p>那么可以做出一个总结，如果一个随机变量A有k中可能取值，其中第i种发生的概率为P(i)，那么信息熵的公式为：<img src="https://s2.ax1x.com/2019/03/26/ANwmT0.png" alt=""></p><p>由此也可见，一个取值的概率越低，他的熵就越高，你确定他所需要的信息量就越大。也可以证明，等概率情况下，信息熵的值最大$^{[1]}$。</p><p>而在等概率（每个情况发生的概率都为P(a)）情况下，我们需要了解一个随机变量所需要的信息量，为$L=log_{2}(1/P(a))$，这种说法由R.V.L.哈莱特与1928年提出$^{[2]}$，早于香农，实际上这里求的也就是熵，只不过那时候没这么叫。（见 信息量和信息熵的区别）</p><p>当时看到这里我有一个巨大的疑问，如果按这个公式计算，那么“选择题”中的（1），小明的消息提供的信息量应该为1bit啊怎么会是0.21bit。</p><p>后来我是这么理解的，如果<strong>单独</strong>把”50%的可能性选C”看成随机变量的话，你作为观察者所面对的情况实际上只有 <strong>2种</strong>：选C或者不选C。那么的确熵为1bit。</p><p>而放回到原来的事件中，情况为<strong>4种</strong>，这条信息只不过使得每个情况的概率都改变了，或者说，仅仅是4种情况之间的权重发生了改变，需要通过期望的方式来计算熵（1.79bit），再相减，得出结果（0.21bit）代表了这条信息在<strong>当前所讨论的宏观态下消除的不确定性。</strong></p><p>更进一步说，其实这里隐藏了一个条件，<strong>我们默认把”50%的可能性选C“这件条信息当成是确定的（熵为0而不是单独情况时的1bit）</strong>，并且在宏观态中根据信息调整了微观态的权重，而这时这条信息对这个宏观态产生了影响，使其熵减了0.21bit。</p><h2 id="信息量和信息熵"><a href="#信息量和信息熵" class="headerlink" title="信息量和信息熵"></a>信息量和信息熵</h2><blockquote><p>信息熵就是上面说的熵，用“信息熵”的叫法是为了和信息量对称</p></blockquote><p>信息熵：描述的是一个事件（宏观态）的不确定度，也就是说，信息熵是宏观态的一个<strong>属性</strong>，并不因为观察者而产生变化，比如你知道了一道选择题的答案，那么这道题的信息熵仅仅对你而言是0bit（也就是说你对这道题已经是确定了的），这时另外有人看到了这道选择题，那么对他而言，这道题的信息熵仍然为2bit。</p><p>信息量：你解开一个不确定事件的过程，在这个过程中你不断的获得<strong>信息量</strong>，来消除信息熵。</p><p>二者的本质上存在差异，但其实是角度不同导致的。</p><blockquote><p>比较好的表述是:</p><p>信息熵是</p><p><strong>对于事件A，我们对A不了解的程度</strong>。</p><p>换句话说，</p><p><strong>就是我们还需要多少信息量才能完全了解事件A</strong></p><p>所需要的信息量就是信息熵。</p><p><strong>而信息熵很大的意思是事件A本身所携带的信息量很大。</strong></p></blockquote><p>引用自<a href="https://www.zhihu.com/question/274997106/answer/383102744" target="_blank" rel="noopener">信息熵越大，信息量到底是越大还是越小？ - 捣衣的回答 - 知乎</a></p><h2 id="熵在物理中的运用"><a href="#熵在物理中的运用" class="headerlink" title="熵在物理中的运用"></a>熵在物理中的运用</h2><p>简单来说，热力学第二定律推导出熵增原理：孤立系统的熵永不减少。进而判断宇宙处在一个不断熵增的状态，因此总有一天会达到“热寂寞”</p><p>有兴趣可参考几个视频</p><p><a href="https://www.bilibili.com/video/av31931321?from=search&amp;seid=9987571277393916947" target="_blank" rel="noopener">热力学第二定律是什么？“麦克斯韦妖”是什么鬼？李永乐老师告诉你</a></p><p><a href="https://www.bilibili.com/video/av25408872/?spm_id_from=333.788.videocard.0" target="_blank" rel="noopener">熵到底是什么？一副牌中抽三张为同花的概率是多大？</a></p><p><a href="https://www.bilibili.com/video/av42589628" target="_blank" rel="noopener">【学习观12】阻碍人类永生的原因是？</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>[1].<a href="https://www.zhihu.com/question/22178202/answer/125040625" target="_blank" rel="noopener">信息熵是什么？ - 柯伟辰的回答 - 知乎</a></p><p>[2].<a href="https://baike.baidu.com/item/%E4%BF%A1%E6%81%AF%E9%87%8F" target="_blank" rel="noopener">信息量—百度百科</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;我们在生活中常常听到“这句话信息量好大。”、“这都是废话，没什么信息量。“，而我们却很少思考，这里的信息量究竟是什么意思？是否可以给出精确定义，甚至，量化它呢？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/03/26/ANfKbT.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>YJango学习观笔记及感悟</title>
    <link href="http://yoursite.com/2019/03/25/YJango%E5%AD%A6%E4%B9%A0%E8%A7%82%E7%AC%94%E8%AE%B0%E5%8F%8A%E6%84%9F%E6%82%9F/"/>
    <id>http://yoursite.com/2019/03/25/YJango学习观笔记及感悟/</id>
    <published>2019-03-25T10:11:47.000Z</published>
    <updated>2019-03-29T02:54:03.283Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://space.bilibili.com/344849038/video" target="_blank" rel="noopener">b站-YJango</a>，个人还是对这位先生的</p><p>视频地址：<a href="https://space.bilibili.com/344849038/video" target="_blank" rel="noopener">b站-Yjango</a>，个人还是对他表示敬意的，他的视频挺具有启发性。</p><p>本文同样参考了<a href="https://www.zhihu.com/question/305705365/answer/621628417" target="_blank" rel="noopener"> 如何评价知乎用户 YJango 的公众号？ - Makise Chris的回答 - 知乎</a> </p></blockquote><a id="more"></a><h3 id="第一季"><a href="#第一季" class="headerlink" title="第一季"></a>第一季</h3><h4 id="01-何为学习"><a href="#01-何为学习" class="headerlink" title="01.何为学习"></a>01.何为学习</h4><p>学习就是从有限例子中找出规律的过程，而这个规律就是知识。</p><h4 id="02-如何学习"><a href="#02-如何学习" class="headerlink" title="02.如何学习"></a>02.如何学习</h4><p>因为人脑机能原因，单单<strong>记忆</strong>一个知识，显然远远达不到掌握它的水平。</p><p>而首先应该做的是明确<strong>问题（输入）</strong>和<strong>答案（输出）</strong>。</p><p>然后通过大量例子来理清二者的关系。接下来根据你的问题和答案，找出这些例子中符合问题及答案的规律。这两步也就是华罗庚的”先把书读厚（大量例子体会关系），再把书读薄（找出知识来压缩例子）。”</p><p>最后，需要用新的问题来验证你的例子是否正确。</p><h4 id="03-学习误区"><a href="#03-学习误区" class="headerlink" title="03.学习误区"></a>03.学习误区</h4><p>学习误区指什么？见图片黄字。</p><p>学习方式分为两类：（1）运动类：语言、运动（2）思考类：数学、逻辑</p><p>举了个语言的例子：</p><p>错误方式：</p><p><img src="https://s2.ax1x.com/2019/03/24/AYs9G8.png" alt=""></p><p>正确方式：</p><p><img src="https://s2.ax1x.com/2019/03/24/AYrzIP.png" alt=""></p><p>老实说我认为这个观点见仁见智，尤其是摒弃中文作为中间媒介这件事，姑且不论对错，可行性就值得怀疑了。</p><h4 id="04-运用误区"><a href="#04-运用误区" class="headerlink" title="04.运用误区"></a>04.运用误区</h4><p>运动类的学习可以同时进行，比如边走路边聊天；而思考类则不行，只能串行操作，所以当我们遇到一个大的问题（输入）时，如果无法直接得到输出，就需要将这个输入拆分，分别解决。</p><h4 id="05-思维导图"><a href="#05-思维导图" class="headerlink" title="05.思维导图"></a>05.思维导图</h4><p>其功能不在于记忆，而在于克服学习和运用中的误区。</p><p>在构建思维导图的过程中，你会先找到<strong>关键词</strong>，然后问自己它是什么？从而不断的联想起具体的例子，进而分析这些例子的共同输入和输出，找出规律；而当问自己它的作用或目的时，实际在思考输入是怎么变成输出的。输入输出可以代表<strong>一类</strong>事物中任何一种<strong>情况</strong>，因此被称为变量。而从输入变成输出的这一过程称为函数。而确定了这个“函数”，等下一次遇到未知的情况时，利用这个函数就可以解答出输出。随后你会用一个更好的关键词来代表你所找出的关系，一种是动宾结构，因为它描述了输入和函数，也就确定了输出，但当人们开始传播知识时，动宾结构也会名词化。</p><p>还有一种知识本身就是名词，会让你觉得没有输出，但这种知识的输出是分类任务中的类型，描述它的是主谓结构：是或不是/是否属于/属于哪个。</p><p>思维导图最强大的地方在于对知识的拆分，构建出知识网络，而知识网络中有些内容是你已经知道的，即具有重用性，学习新内容时，可以利用这些重用性，加快学习速度。拆分知识既可以用在学习未知知识上，也可以用在运用已有知识上（分而治之）。</p><p>而拆分知识的能力也是一种特殊的知识，称为二阶知识，不同于一般的知识用于描述信息与信息的关系，二阶知识用于描述知识与知识的关系。</p><p>视频中举的例子就是<strong>思维导图</strong>，假设我们需要构建一个有关于思维导图内容的思维导图。</p><p>那么首先，找出关键词——思维导图。然后问自己：思维导图是什么？因此联想出思维导图使用的具体例子：任务清单、知识体系、任务关系…，接着分析这些例子的共同输入——杂乱信息，共同输出——知识网络。而当你问它的作用时，也就是在思考输入是怎么变成输出的。一类事物，这个例子中，假设它代表的是任务清单这一类，那么输入的杂乱信息和输出的知识网络就是任务清单这一类事物的特定情况。而这个“函数”：可以理解为思维导图的画图方法。然后是找动宾结构，这里是压缩信息（其中压缩是函数，信息是输出），当人们开始传递知识时，压缩信息就被名词化成了思维导图。</p><p>知识本身属于名词的没说例子。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://space.bilibili.com/344849038/video&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;b站-YJango&lt;/a&gt;，个人还是对这位先生的&lt;/p&gt;
&lt;p&gt;视频地址：&lt;a href=&quot;https://space.bilibili.com/344849038/video&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;b站-Yjango&lt;/a&gt;，个人还是对他表示敬意的，他的视频挺具有启发性。&lt;/p&gt;
&lt;p&gt;本文同样参考了&lt;a href=&quot;https://www.zhihu.com/question/305705365/answer/621628417&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; 如何评价知乎用户 YJango 的公众号？ - Makise Chris的回答 - 知乎&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>关于记忆方法</title>
    <link href="http://yoursite.com/2019/03/25/%E5%85%B3%E4%BA%8E%E8%AE%B0%E5%BF%86%E6%96%B9%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/25/关于记忆方法/</id>
    <published>2019-03-25T09:52:12.000Z</published>
    <updated>2019-03-25T10:04:58.195Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>阅读了几篇关于记忆方法的文章，有所感悟，结合了一下自己经历，选了几个我认为有长期实践意义的方法，在此记录，此文可能会长期更新，毕竟记忆方法也是要不断调整的。</p></blockquote><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我认为针对不同问题，应该具有不同的记忆方法。比如：</p><p>单词记忆，那么也许联想类方法比较有用；</p><p>记忆某些抽象概念，如剩余价值的含义，也许更适合用关键词法；</p><p>…</p><p>所以记忆方法不能一概而论，犯教条主义错误。</p><a id="more"></a><h4 id="记忆整体框架"><a href="#记忆整体框架" class="headerlink" title="记忆整体框架"></a>记忆整体框架</h4><p>结构化，也就是常说的<strong>思维导图</strong>，从全局出发，有助于你理清思路，尤其当你面对一个比较庞杂而又相互关联的知识（比如政治一整个章节的内容）。现在很多书籍都会替你整理好，但是请务必要<strong>用自己的方式去整理一遍</strong>，也许有人会说，我自己思考的和书上整理的一样啊，那么也请合上书默写出来。</p><p>实际上你默写也好，自己写也罢，<strong>这里的关键是在这个过程是一定要去==主动思考==（敲重点！）这个庞杂的知识的脉络到底是什么样的。</strong></p><p>思维导图：</p><p><img src="https://s2.ax1x.com/2019/03/25/At22X8.png" alt=""></p><p><img src="https://s2.ax1x.com/2019/03/25/AtRC1x.png" alt=""></p><p>参考资料：<a href="https://zhuanlan.zhihu.com/YJango" target="_blank" rel="noopener">知乎专栏——Yjango</a></p><h4 id="记忆段落-句子内容"><a href="#记忆段落-句子内容" class="headerlink" title="记忆段落/句子内容"></a>记忆段落/句子内容</h4><p>一般来说，我们学习的总是不熟悉的内容，再加上作者和你在表述习惯上的差异，才会导致你无法理解作者想要传达的意思，才会导致只能死记硬背。</p><p>所以同样需要我们用自己的方式理解并记忆作者想要传达给你的意思。那么如何去用自己的语言表述出来呢？</p><p>引用一句话：记忆<strong>书本原有的关键词、知识点</strong>等<strong>“点”信息</strong>，<strong>而后自己去连“点”成“线</strong>”——指的是把这一块的“点”信息串成有逻辑的内容$^{[2]}$。</p><p>举个例子：</p><blockquote><p>类是对一群具有相同特征或者行为的事物的一个统称，是抽象的，不能直接使用。特征被称为”属性“，行为被称为”方法“。</p></blockquote><p>在这个句子中，对我而言，关键词是”类，特征=属性，行为=方法“。所以对我而言只需要记住这几个内容，剩下的用自己的话重复一遍：</p><blockquote><p>类是具有相同的特征和行为的事物的统称，是一个抽象概念。实际运用时，特征又叫做属性，行为又叫方法。</p></blockquote><p><strong>参考资料</strong>：[2].<a href="https://www.zhihu.com/question/50343728" target="_blank" rel="noopener">你有什么值得分享的高效学习方法？</a> 这个问题下最高赞的回答</p><p>我认为这个方法尤其适用于抽象概念——尤其是文科类——的记忆。</p><h4 id="记忆关键词"><a href="#记忆关键词" class="headerlink" title="记忆关键词"></a>记忆关键词</h4><p>联想记忆法，这个方法算是很常见了，但我认为可以看一下这个视频：·<a href="https://weibo.com/1974576991/HmiDNf2ps?type=comment" target="_blank" rel="noopener">TED画图记忆方法</a>。</p><p>视频中提到可以用画图的方式来替代文字记忆，但我认为在记忆大量内容的时候这种方法太低效。不过比起单纯的联想，画图具有更强的可操作性（有时候真是联想不到），而且动笔的过程中又进一步加深了你的思考。所以我认为可以在上一个记忆法中，记忆关键字时，根据需要使用这个方法。</p><p>还是上面的例子，当我们提取关键字后，可能还是会觉得抽象，类是什么？特征和行为又怎么理解？这时候把这几个词语通过联想的方式去理解记忆：</p><p>类，可以看做是制造一样东西（比如飞机）的设计图；属性，就好比飞机都有一对翅膀；方法，就好比飞机如何起飞。还可以接着拓展，比如用类创建一个对象，就相当于用设计图纸去制造一架飞机。</p><p><img src="https://s2.ax1x.com/2019/03/24/AYeagH.png" alt=""></p><p>其实无论哪种方法，归根结底都是要把新的知识转化为自己更熟悉的方式，加以理解并记忆。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;阅读了几篇关于记忆方法的文章，有所感悟，结合了一下自己经历，选了几个我认为有长期实践意义的方法，在此记录，此文可能会长期更新，毕竟记忆方法也是要不断调整的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;我认为针对不同问题，应该具有不同的记忆方法。比如：&lt;/p&gt;
&lt;p&gt;单词记忆，那么也许联想类方法比较有用；&lt;/p&gt;
&lt;p&gt;记忆某些抽象概念，如剩余价值的含义，也许更适合用关键词法；&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;所以记忆方法不能一概而论，犯教条主义错误。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reading" scheme="http://yoursite.com/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>正向传播的向量化实现</title>
    <link href="http://yoursite.com/2019/03/23/%E6%AD%A3%E5%90%91%E4%BC%A0%E6%92%AD%E7%9A%84%E5%90%91%E9%87%8F%E5%8C%96%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2019/03/23/正向传播的向量化实现/</id>
    <published>2019-03-23T06:51:39.000Z</published>
    <updated>2019-04-06T10:13:09.799Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>神经网络中正向传播(Forward propagation)的向量化(Vectorized implementation)</p></blockquote><p><img src="https://s2.ax1x.com/2019/03/23/AGrwuR.png" alt=""></p><a id="more"></a><p>其实没什么难的，就是几个符号理解起来可能有点费劲，下面简单解释一下：</p><p>从这个式子入手：$z^{(2)}=\Theta^{(1)}*a^{(1)}$</p><p>$z^{(2)}$等于信号$a^{(1)}$在传输过程中乘上响应的权重$\Theta^{(1)}​$，展开来写的话就是左图中等号右边的灰色线框。</p><p>$a^{(1)}$（activation values of layer one）是指第一层中$x_{0}$~$x_{3}$构成的一维<strong>向量</strong>，上标1就是指第一层。</p><p>$\Theta^{(1)}$是指传递过程中不同信号所对应的权重，反应在公式上就是$\Theta^{(1)}_{10}$~$\Theta^{(1)}_{33}$所构成的<strong>矩阵</strong>。</p><p>$\Theta^{(1)}_{10}$下标的10是指，接收信号的神经元为下一层的第一个，发出信号的为这一层的第0个神经元。</p><p>这里额外说一下这个$\Theta^{(1)}​$的维度，如果在第$j​$层有$s_{j}​$个神经元(units)，在第$j+1​$层有$s_{j+1}​$个神经元，那么对应的权重的维度为$s_{j+1}*(s_{j}+1)​$。</p><p>其中$s_{j}+1$是因为上一层在传递时，默认会传递一个$s_{0}=1​$</p><p>以上是传递过程中的，$z^{(2)}$传递到神经元之后，就通过激励函数（图中是S函数）求出需要传递个下一层的信号$a^{(2)}$</p><p>即公式：$a^{(2)}=g(z^{(2)})$</p><p>依次类推，即可求出最终的假设函数$h_{\Theta}(x)$</p><blockquote><p>本文是从信号发出的角度去阐述，但似乎更多文章时站在信号接收的角度，但意思是一样的</p></blockquote><p>参考文章</p><p>[1]. <a href="https://zhuanlan.zhihu.com/p/28299430" target="_blank" rel="noopener">机器学习笔记（2）—— 神经网络</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;神经网络中正向传播(Forward propagation)的向量化(Vectorized implementation)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/03/23/AGrwuR.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>sklearn中的函数classification_report</title>
    <link href="http://yoursite.com/2019/03/20/sklearn%E4%B8%AD%E7%9A%84%E5%87%BD%E6%95%B0classification-report/"/>
    <id>http://yoursite.com/2019/03/20/sklearn中的函数classification-report/</id>
    <published>2019-03-20T08:42:54.000Z</published>
    <updated>2019-03-24T01:51:45.678Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>classification_report函数主要用于显示主要分类指标的文本报告</p></blockquote><h4 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h4><p>在报告中显示每个类的精确度、召回率等信息（可以用来检测回归算法的准确度）。</p><a id="more"></a><h4 id="2-classification-report-参数"><a href="#2-classification-report-参数" class="headerlink" title="2.classification_report()参数"></a>2.classification_report()参数</h4><p>详见<a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html" target="_blank" rel="noopener">官方文档</a>，这里只说几个重要参数</p><p><code>y_true</code>：1维数组，目标值</p><p><code>y_pred</code>：1维数组，分类器返回的估计值</p><p><code>label</code>：数组，报告中显示的类标签索引列表</p><p><code>target_names</code>：字符串列表，当和<code>label</code>匹配时作为<code>label</code>的名称</p><h4 id="3-classification-report-返回值"><a href="#3-classification-report-返回值" class="headerlink" title="3.classification_report()返回值"></a>3.classification_report()返回值</h4><blockquote><p>解释一下两个名词</p><p>正样本：与你所要研究的目的相关</p><p>负样本：与你所要研究的目的无关</p><p>举个例子：如果你要做一间教室里的人脸识别，那么正样本就是人脸，负样本就是课桌、门窗之类的</p></blockquote><p>TP(True Positive): 预测为正样本， 实际为正样本（预测正确）</p><p>FP(False Positive): 预测为正样本，  实际为负样本 （预测错误）</p><p>FN(False Negative): 预测为负样本，实际为正样本 （预测错误）</p><p>TN(True Negative): 预测为负样本， 实际为负样本 （预测正确）</p><p>精确度(precision)=正确预测的个数(TP)/预测为正样本的个数(TP+FP)</p><blockquote><p>检索结果中，都是你认为应该为正的样本（第二个字母都是P），但是其中有你判断正确的和判断错误的（第一个字母有T ，F）。</p></blockquote><p>召回率(recall)=正确预测值的个数(TP)/实际为正样本的个数(TP+FN)</p><blockquote><p>检索结果中，你判断为正的样本也确实为正的，以及那些没在检索结果中被你判断为负但是事实上是正的，或者说你没预测到的（FN）。</p></blockquote><p>F1值=2*精度*召回率/(精度+召回率)</p><p>不明白的话参考以下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">4</span>]: <span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> classification_report</span><br><span class="line">   ...: y_true = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>]</span><br><span class="line">   ...: y_pred = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>]</span><br><span class="line">   ...: labels =[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">   ...: target_names = [<span class="string">'labels_1'</span>,<span class="string">'labels_2'</span>,<span class="string">'labels_3'</span>,<span class="string">'labels-4'</span>]</span><br><span class="line">   ...: print(classification_report(y_true,y_pred,labels=labels,target_names= t</span><br><span class="line">   ...: arget_names,digits=<span class="number">3</span>))</span><br><span class="line">   ...:</span><br><span class="line">              precision    recall  f1-score   support</span><br><span class="line"></span><br><span class="line">    labels_1      <span class="number">0.500</span>     <span class="number">1.000</span>     <span class="number">0.667</span>         <span class="number">1</span></span><br><span class="line">    labels_2      <span class="number">1.000</span>     <span class="number">0.667</span>     <span class="number">0.800</span>         <span class="number">3</span></span><br><span class="line">    labels_3      <span class="number">0.000</span>     <span class="number">0.000</span>     <span class="number">0.000</span>         <span class="number">1</span></span><br><span class="line"></span><br><span class="line">   micro avg      <span class="number">0.600</span>     <span class="number">0.600</span>     <span class="number">0.600</span>         <span class="number">5</span></span><br><span class="line">   macro avg      <span class="number">0.500</span>     <span class="number">0.556</span>     <span class="number">0.489</span>         <span class="number">5</span></span><br><span class="line">weighted avg      <span class="number">0.700</span>     <span class="number">0.600</span>     <span class="number">0.613</span>         <span class="number">5</span></span><br></pre></td></tr></table></figure><p>最右边<code>support</code>列为每个标签的出现次数(权重)。</p><p><code>micro avg</code>：计算所有数据中预测正确的值，比如这里是3/5=0.6</p><p><code>macro avg</code>：每个类别指标中的未加权平均值(一列)，比如准确率(precision)的<code>macro avg</code>是：$(0.5+1.0+0)/3=0.5$</p><p><code>weighted avg</code>：每个类别指标中的加权平均，比如准确率(precision)的<code>weighted avg</code>是：$(0.5<em>1+1.0</em>3+0*1)/3=0.7$  </p><h4 id="4-参考资料"><a href="#4-参考资料" class="headerlink" title="4.参考资料"></a>4.参考资料</h4><p>[1] <a href="http://www.cnblogs.com/akrusher/articles/6442839.html" target="_blank" rel="noopener">博客园</a></p><p>[2] <a href="https://blog.csdn.net/genghaihua/article/details/81155200" target="_blank" rel="noopener">CSDN博客</a></p><p>[3] <a href="https://blog.csdn.net/kancy110/article/details/74937469" target="_blank" rel="noopener">CSDN博客</a></p><p>[4] <a href="https://blog.csdn.net/guyubit/article/details/52276013" target="_blank" rel="noopener">CSDN博客——TP、TN、FP、FN解释说明</a></p><p>[5] <a href="https://www.libinx.com/2018/understanding-sklearn-classification-report/" target="_blank" rel="noopener">读懂 sklearn 的 classification_report</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;classification_report函数主要用于显示主要分类指标的文本报告&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h4&gt;&lt;p&gt;在报告中显示每个类的精确度、召回率等信息（可以用来检测回归算法的准确度）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="sklearn" scheme="http://yoursite.com/tags/sklearn/"/>
    
  </entry>
  
  <entry>
    <title>Numpy中的矩阵乘法</title>
    <link href="http://yoursite.com/2019/03/19/Numpy%E4%B8%AD%E7%9A%84%E7%9F%A9%E9%98%B5%E4%B9%98%E6%B3%95/"/>
    <id>http://yoursite.com/2019/03/19/Numpy中的矩阵乘法/</id>
    <published>2019-03-19T03:38:01.000Z</published>
    <updated>2019-03-29T08:07:58.601Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简单介绍一下Numpy中<code>.dot()</code>、<code>*</code>、<code>multiply()</code>和<code>@</code>的区别</p></blockquote><a id="more"></a><h4 id="1-np-multiply-函数"><a href="#1-np-multiply-函数" class="headerlink" title="1. np.multiply()函数"></a>1. np.multiply()函数</h4><p>数组/矩阵对应的位置相乘。</p><h4 id="2-np-dot-函数"><a href="#2-np-dot-函数" class="headerlink" title="2. np.dot()函数"></a>2. np.dot()函数</h4><p>2.1.  当数组/矩阵秩为1(即向量)时，执行点积。</p><p>2.2.  当数组/矩阵秩大于2时，执行矩阵乘法。</p><p>2.3.  .dot可以被数组对象调用，也可以通过numpy库调用（被matrix调用可以执行，但会报错）。</p><h4 id="3-星号-乘法运算"><a href="#3-星号-乘法运算" class="headerlink" title="3.  星号(*)乘法运算"></a>3.  星号(*)乘法运算</h4><p>3.1.  对数组执行对应位置相乘。</p><p>3.2.  对矩阵执行矩阵乘法。</p><h4 id="4-乘法运算"><a href="#4-乘法运算" class="headerlink" title="4. @乘法运算"></a>4. @乘法运算</h4><p>4.1.  对于矩阵乘法而言，完全等价于<code>.dot()</code>。</p><p>4.2.  区别在于，当a和b中有一个是标量时，只能用<code>.dot()</code>否则会报错。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;简单介绍一下Numpy中&lt;code&gt;.dot()&lt;/code&gt;、&lt;code&gt;*&lt;/code&gt;、&lt;code&gt;multiply()&lt;/code&gt;和&lt;code&gt;@&lt;/code&gt;的区别&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Numpy" scheme="http://yoursite.com/tags/Numpy/"/>
    
  </entry>
  
  <entry>
    <title>Numpy中的Meshgrid</title>
    <link href="http://yoursite.com/2019/03/16/Numpy%E4%B8%AD%E7%9A%84Meshgrid/"/>
    <id>http://yoursite.com/2019/03/16/Numpy中的Meshgrid/</id>
    <published>2019-03-16T07:42:50.000Z</published>
    <updated>2019-04-26T08:06:55.959Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Numpy是在利用Python进行科学计算和数据处理时肯定会使用到的模块(moudle)。</p><p>本文用比较通俗的语言讲解一下其中的Meshgrid函数</p></blockquote><h4 id="1-Meshgrid前言"><a href="#1-Meshgrid前言" class="headerlink" title="1.Meshgrid前言"></a>1.Meshgrid前言</h4><p>简单来说，<code>Meshgrid</code>就是在用两个坐标轴上的点在平面上画网格，当然也可以用三个坐标，但是为了方便理解，下面都用两个坐标轴举例。</p><a id="more"></a><h4 id="2-Meshgrid参数"><a href="#2-Meshgrid参数" class="headerlink" title="2.Meshgrid参数"></a>2.Meshgrid参数</h4><p>详情咨询<a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.meshgrid.html" target="_blank" rel="noopener">官方文档</a>，最常用的就是传入两个一维数组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.linspace(<span class="number">-10</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">y = np.linspace(<span class="number">-10</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">xv,yv = meshgrid(x,y)</span><br></pre></td></tr></table></figure><h4 id="3-Meshgrid返回值"><a href="#3-Meshgrid返回值" class="headerlink" title="3.Meshgrid返回值"></a>3.Meshgrid返回值</h4><p>xv的返回值，列相等：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[-10,10],</span><br><span class="line"> [-10,10]]</span><br></pre></td></tr></table></figure><p>yv的返回值，行相等：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[-10,-10],</span><br><span class="line"> [10,10]]</span><br></pre></td></tr></table></figure><p>从上面很容易看出，Meshgrid实际上是返回两个<strong>矩阵</strong>，两个矩阵不同之处，下面用一张图来表示一目了然。</p><p><img src="https://s2.ax1x.com/2019/03/15/AEfxHJ.jpg" alt=""></p><p>可以看出就是通过两个矩阵的方式完成了网格的绘制。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p>[1] <a href="https://zhuanlan.zhihu.com/p/33579211" target="_blank" rel="noopener">Python-Numpy模块Meshgrid函数</a></p><p>[2] <a href="https://zhuanlan.zhihu.com/p/33579211" target="_blank" rel="noopener">Numpy中Meshgrid函数介绍及2种应用场景</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Numpy是在利用Python进行科学计算和数据处理时肯定会使用到的模块(moudle)。&lt;/p&gt;
&lt;p&gt;本文用比较通俗的语言讲解一下其中的Meshgrid函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-Meshgrid前言&quot;&gt;&lt;a href=&quot;#1-Meshgrid前言&quot; class=&quot;headerlink&quot; title=&quot;1.Meshgrid前言&quot;&gt;&lt;/a&gt;1.Meshgrid前言&lt;/h4&gt;&lt;p&gt;简单来说，&lt;code&gt;Meshgrid&lt;/code&gt;就是在用两个坐标轴上的点在平面上画网格，当然也可以用三个坐标，但是为了方便理解，下面都用两个坐标轴举例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>vscode常用快捷键</title>
    <link href="http://yoursite.com/2019/03/14/vscode%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>http://yoursite.com/2019/03/14/vscode常用快捷键/</id>
    <published>2019-03-14T12:14:52.000Z</published>
    <updated>2019-03-14T12:14:52.543Z</updated>
    
    <content type="html"><![CDATA[<p>Ctrl+D：选中当前单词，再按一次选中下一个。（妈的谁用谁知道）</p><p>Ctrl+L：选中当前行</p><p>ctrl+shift+alt+up/down：多行编辑</p><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ctrl+D：选中当前单词，再按一次选中下一个。（妈的谁用谁知道）&lt;/p&gt;
&lt;p&gt;Ctrl+L：选中当前行&lt;/p&gt;
&lt;p&gt;ctrl+shift+alt+up/down：多行编辑&lt;/p&gt;
&lt;p&gt;未完待续…&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="vscode" scheme="http://yoursite.com/tags/vscode/"/>
    
  </entry>
  
  <entry>
    <title>浅谈分位数</title>
    <link href="http://yoursite.com/2019/03/12/%E6%B5%85%E8%B0%88%E5%88%86%E4%BD%8D%E6%95%B0/"/>
    <id>http://yoursite.com/2019/03/12/浅谈分位数/</id>
    <published>2019-03-12T12:41:18.000Z</published>
    <updated>2019-03-14T12:15:30.449Z</updated>
    
    <content type="html"><![CDATA[<p>在Coursera看Ng的视频时，因为不想用MATLAB和Octave，改用了Python实现，由于用到了pandas这个模块(moudle)中的<code>.describe()</code>方法，对它输出值(见下面代码段)中的分位数（25%，50%，75%）没太弄懂，再查阅各种资料之后，做一个简单的总结。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.describe()</span><br><span class="line">count    <span class="number">3.0</span></span><br><span class="line">mean     <span class="number">2.0</span></span><br><span class="line">std      <span class="number">1.0</span></span><br><span class="line">min      <span class="number">1.0</span></span><br><span class="line"><span class="number">25</span>%      <span class="number">1.5</span></span><br><span class="line"><span class="number">50</span>%      <span class="number">2.0</span></span><br><span class="line"><span class="number">75</span>%      <span class="number">2.5</span></span><br><span class="line">max      <span class="number">3.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="中位数"><a href="#中位数" class="headerlink" title="中位数"></a>中位数</h2><p>首先需要把数据集从小到大<strong>排列</strong>（从大到小也行，取决于实际需求）。</p><p><strong>1、若样本个数n为奇数，那么只需要取中间值（第n/2个）就是数据集的中位数。</strong></p><p>e.g.数据集[1,2,3]，则中位数为2</p><p><strong>2、若n为偶数，则取中间两个数的平均值作为中位数</strong></p><p>e.g.[1,2,3,4]，则中位数为(3+2)/2=2.5</p><p>中位数相对简单且好理解，其往往运用在数据集中某个样本出现明显异常值时。比如[1,2,3,4,1000000]，这时候如果去中位数是3，但如果取平均数，就会产生巨大误差。</p><h2 id="四分位数（25-50-75-）"><a href="#四分位数（25-50-75-）" class="headerlink" title="四分位数（25%,50%,75%）"></a>四分位数（25%,50%,75%）</h2><p>四分位数是作为中位数的拓展，关于如何计算四分位数我发现了两种不同的计算方法，得出的数值会存在差异。wiki上说对于该值的选取仍然存在争议，但是无论用那种方法，都能够将数据集划分，从而进一步分析数据变量的趋势。</p><h4 id="解法一：分步法（自己取的）"><a href="#解法一：分步法（自己取的）" class="headerlink" title="解法一：分步法（自己取的）"></a>解法一：分步法（自己取的）</h4><p>这个方法很简单，就是先排序然后取中位数（50%），然后以中位数为分界线，把数据集切分为两部分再分别取中位值（25%，75%）</p><p><strong>1、若样本个数n为奇数</strong></p><p>比如[1,2,3]</p><p>50%分位：(1+3)/2=2；</p><p>25%分位：(1+2)/2=1.5；</p><p>75%分位：(2+3)/2=2.5；</p><blockquote><p>这个例子举的有点不好，带小数点了，但是意思理解就行，就是取中位数—划分—取中位数</p></blockquote><p><strong>2、若样本个数n为偶数</strong></p><p>[1,2,3,4,5,6,7,8]</p><p>50%分位：(4+5)/2=4.5；</p><p>25%分位：(2+3)/2=2.5；</p><p>75%分位：(6+7)/2=6.5；</p><p>而在pandas中也是用这种方法计算的，wiki词条中的例子也是。</p><h4 id="解法二："><a href="#解法二：" class="headerlink" title="解法二："></a>解法二：</h4><p>这个方法有点麻烦。</p><p><strong>1、若样本个数n为奇数</strong></p><p>首先确定四分位的位置。</p><p>设置下四分位数、中位数和上四分位数，记为Q1、Q2、Q3</p><p>Q1位置=(n+1)/4      (25%分位)</p><p>Q2位置=2(n+1)/4    (50%分位)</p><p>Q3位置=3(n+1)/4    (75%分位)</p><p>e.g.[13、13.5、13.8、13.9、14、14.6、14.8、15、15.2、15.4、15.7]</p><p>Q1位置=(11+1)/4=3</p><p>Q2位置=2(11+1)/4=6</p><p>Q3位置=3(11+1)/4=9</p><p>对应的分位值这分别为13.8、14.6、15.2</p><p><strong>2、若样本个数n为偶数</strong></p><p>依然先确定位置Q1、Q2、Q3，这里直接用一个例子来说明，[14、15、16，16、17、18、18、19、19、20、2l，21、22、22、23、24、24、25、26、26]，例子中n=20。</p><p>Q1位置=(20+1)/4=5.25，这里可以看到位于[5]、[6]位置是17和18，则Q1=17+(18-17)*(5.25-5)=17.25</p><p>同理可得：</p><p>Q2位置=2(20+1)/4=10.5，则Q2=20+(21-20)*(10.5-10)=20.5</p><p>Q3位置=3(20+1)/4=15.75，则Q3=23+(24-23)*(15.75-15)=23.75</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1、<a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%88%86%E4%BD%8D%E6%95%B0" target="_blank" rel="noopener">维基百科</a></p><p>2、<a href="https://wiki.mbalib.com/wiki/%E5%9B%9B%E5%88%86%E4%BD%8D%E6%95%B0" target="_blank" rel="noopener">MBA百科</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Coursera看Ng的视频时，因为不想用MATLAB和Octave，改用了Python实现，由于用到了pandas这个模块(moudle)中的&lt;code&gt;.describe()&lt;/code&gt;方法，对它输出值(见下面代码段)中的分位数（25%，50%，75%）没太弄懂，再查阅各种资料之后，做一个简单的总结。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;s = pd.Series([&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt;&amp;gt; &lt;/span&gt;s.describe()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;count    &lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mean     &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;std      &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;min      &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;25&lt;/span&gt;%      &lt;span class=&quot;number&quot;&gt;1.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;%      &lt;span class=&quot;number&quot;&gt;2.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;75&lt;/span&gt;%      &lt;span class=&quot;number&quot;&gt;2.5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;max      &lt;span class=&quot;number&quot;&gt;3.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dtype: float64&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://yoursite.com/tags/Machine-Learning/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>计算机编码问题</title>
    <link href="http://yoursite.com/2019/03/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/03/05/计算机编码问题/</id>
    <published>2019-03-05T10:14:56.000Z</published>
    <updated>2019-03-05T10:14:56.476Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>整理了一些我对进制之间转换的理解，有些地方为了记忆方便可能不太准确，欢迎指正。</p></blockquote><p>我们日常最常用的进制当然是十进制DEC，因为最符合人类的习惯（数手指）。</p><p>对于计算机而言，最熟悉的则是二进制BIN（高低电平表示<code>1</code>和<code>0</code>）。</p><p>此外常用的还有八进制OCT，十六进制HEX。</p><a id="more"></a><h4 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h4><p>以最常见的十进制为例，我们对于数字的记录方式是通过<strong>数位+基数(0~9)</strong>，比如152可以看成是1*10²+5*10¹+2*10º，数位从低到高为个位、十位、百位…</p><p>这种方式对应到其他进制只是数位和基数都不相同，其组成数字的法则是一样的。</p><p>比如二进制从低位到高位可以看做是个位、二位、四位、八位….</p><p>e.g. 152的二进制表示是10011000，就可以看做是$1<em>2^7+1</em>2^4+1*2^3$</p><blockquote><p>一般而言，<strong>不同进制之间转换的时候都会以BIN作为桥梁</strong>。</p></blockquote><h4 id="不同进制之间转换"><a href="#不同进制之间转换" class="headerlink" title="不同进制之间转换"></a>不同进制之间转换</h4><p><a href="https://www.zhihu.com/question/22205629/answer/61304268" target="_blank" rel="noopener">不同进制之间如何熟练转换-知乎</a></p><p>因为OCT和HEX都是BIN的倍数，所以一般转换时都是分位转换，即OCT的一位数相当于BIN的三位，HEX的一位数相当于BIN的四位。</p><h4 id="常听见的几种编码"><a href="#常听见的几种编码" class="headerlink" title="常听见的几种编码"></a>常听见的几种编码</h4><p>ASCII标准码：最高位奇偶校验位，后七位进行存储，可存128个字符。</p><p>Unicode：因为计算机的普及，中文、日文以及其它文字使得更多的字符需要被编码，为了统一标准，因此Unicode诞生了，用两个字节来表示一个字符。</p><p>UTF-8：因为字母只需要一个字节，而汉字需要两个字节，这样在使用Unicode表示字母的时候就导致内存空间被浪费，因此再Unicode的基础上又诞生了更通用的UTF-8,他的特点是对不同范围的字符使用不同长度的编码。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;整理了一些我对进制之间转换的理解，有些地方为了记忆方便可能不太准确，欢迎指正。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们日常最常用的进制当然是十进制DEC，因为最符合人类的习惯（数手指）。&lt;/p&gt;
&lt;p&gt;对于计算机而言，最熟悉的则是二进制BIN（高低电平表示&lt;code&gt;1&lt;/code&gt;和&lt;code&gt;0&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;此外常用的还有八进制OCT，十六进制HEX。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Computer foundation" scheme="http://yoursite.com/tags/Computer-foundation/"/>
    
      <category term="编码" scheme="http://yoursite.com/tags/%E7%BC%96%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Python爬虫实践1</title>
    <link href="http://yoursite.com/2019/03/01/Python%E7%88%AC%E8%99%AB%E5%AE%9E%E8%B7%B51/"/>
    <id>http://yoursite.com/2019/03/01/Python爬虫实践1/</id>
    <published>2019-03-01T08:42:57.000Z</published>
    <updated>2019-03-01T08:50:06.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="项目001：爬取本地html文件"><a href="#项目001：爬取本地html文件" class="headerlink" title="项目001：爬取本地html文件"></a>项目001：爬取本地html文件</h2><h3 id="要求：爬取评分高于4分的文章标题和分类"><a href="#要求：爬取评分高于4分的文章标题和分类" class="headerlink" title="要求：爬取评分高于4分的文章标题和分类"></a>要求：爬取评分高于4分的文章标题和分类</h3><p><img src="https://s2.ax1x.com/2019/02/22/kWLnnP.png" alt=""></p><a id="more"></a><h3 id="解决步骤："><a href="#解决步骤：" class="headerlink" title="解决步骤："></a>解决步骤：</h3><p>step1、用BeautifulSoup解析网页</p><p>step2、查找需要用的tag</p><p>step3、提取tag中有用的信息</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">data = []</span><br><span class="line">path = <span class="string">'1_2/1_2code_of_video/web/new_index.html'</span> <span class="comment">#vscode的相对路径是对于工程目录而非当前目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#用with open() as f的方法比f.open()好，因为前者封装了f.close()，省去了清除内存的麻烦。</span></span><br><span class="line"><span class="keyword">with</span> open(path, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    Soup = BeautifulSoup(f.read(), <span class="string">'lxml'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#这里用select()和find_all()都行</span></span><br><span class="line">    titles = Soup.select(<span class="string">'ul &gt; li &gt; div.article-info &gt; h3 &gt; a'</span>)</span><br><span class="line">    pics = Soup.select(<span class="string">'ul &gt; li &gt; img'</span>)</span><br><span class="line">    descs = Soup.select(<span class="string">'ul &gt; li &gt; div.article-info &gt; p.description'</span>)</span><br><span class="line">    rates = Soup.select(<span class="string">'ul &gt; li &gt; div.rate &gt; span'</span>)</span><br><span class="line">    cates = Soup.select(<span class="string">'ul &gt; li &gt; div.article-info &gt; p.meta-info'</span>)</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment">#因为要通过一个tag值来判断，随后返回该tag值对应的另一tag值</span></span><br><span class="line"><span class="comment">#所以这里用dict来处理</span></span><br><span class="line"><span class="keyword">for</span> title, pic, desc, rate, cate <span class="keyword">in</span> zip(titles, pics, descs, rates, cates):</span><br><span class="line">    info = &#123;</span><br><span class="line">        <span class="string">'title'</span>: title.get_text(),</span><br><span class="line">        <span class="string">'pic'</span>: pic.get(<span class="string">'src'</span>),</span><br><span class="line">        <span class="string">'descs'</span>: desc.get_text(),</span><br><span class="line">        <span class="string">'rate'</span>: rate.get_text(),</span><br><span class="line">        <span class="string">'cate'</span>: list(cate.stripped_strings)</span><br><span class="line">    &#125;</span><br><span class="line">    data.append(info)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> len(i[<span class="string">'rate'</span>]) &gt;= <span class="number">3</span>:</span><br><span class="line">        print(i[<span class="string">'title'</span>], i[<span class="string">'cate'</span>])</span><br></pre></td></tr></table></figure><h3 id="最后输出"><a href="#最后输出" class="headerlink" title="最后输出"></a>最后输出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Sardinia&apos;s top 10 beaches [&apos;fun&apos;, &apos;Wow&apos;]</span><br><span class="line">How to get tanned [&apos;butt&apos;, &apos;NSFW&apos;]</span><br><span class="line">How to be an Aussie beach bum [&apos;sea&apos;]</span><br><span class="line">Summer&apos;s cheat sheet [&apos;bay&apos;, &apos;boat&apos;, &apos;beach&apos;]</span><br></pre></td></tr></table></figure><h3 id="其余笔记"><a href="#其余笔记" class="headerlink" title="其余笔记"></a>其余笔记</h3><p>1、</p><blockquote><p>Beautiful Soup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种: <code>Tag</code> , <code>NavigableString</code> , <code>BeautifulSoup</code> , <code>Comment</code> .                                                      ——官方手册</p></blockquote><p>2、select()和find_all()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#find_all()的返回值类型</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">bs4</span>.<span class="title">element</span>.<span class="title">ResultSet</span>'&gt;</span></span><br><span class="line"><span class="class">#<span class="title">select</span><span class="params">()</span>的返回值类型</span></span><br><span class="line"><span class="class">&lt;<span class="title">class</span> '<span class="title">list</span>'&gt;</span></span><br></pre></td></tr></table></figure><p>返回的都是包含标签的<strong>列表</strong>。</p><p>参考资料</p><p>[1] <a href="https://www.cnblogs.com/ymjyqsx/p/6554817.html" target="_blank" rel="noopener">with open() as f和open()的区别</a></p><p>[2] <a href="https://www.jianshu.com/p/9cb390ffec29" target="_blank" rel="noopener">vscode文件路径问题</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;项目001：爬取本地html文件&quot;&gt;&lt;a href=&quot;#项目001：爬取本地html文件&quot; class=&quot;headerlink&quot; title=&quot;项目001：爬取本地html文件&quot;&gt;&lt;/a&gt;项目001：爬取本地html文件&lt;/h2&gt;&lt;h3 id=&quot;要求：爬取评分高于4分的文章标题和分类&quot;&gt;&lt;a href=&quot;#要求：爬取评分高于4分的文章标题和分类&quot; class=&quot;headerlink&quot; title=&quot;要求：爬取评分高于4分的文章标题和分类&quot;&gt;&lt;/a&gt;要求：爬取评分高于4分的文章标题和分类&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://s2.ax1x.com/2019/02/22/kWLnnP.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
</feed>
